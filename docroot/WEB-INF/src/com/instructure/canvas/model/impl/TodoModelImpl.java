/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.instructure.canvas.model.impl;

import com.instructure.canvas.model.Todo;
import com.instructure.canvas.model.TodoModel;
import com.instructure.canvas.model.TodoSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Todo service. Represents a row in the &quot;CANVAS_Todo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.instructure.canvas.model.TodoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TodoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TodoImpl
 * @see com.instructure.canvas.model.Todo
 * @see com.instructure.canvas.model.TodoModel
 * @generated
 */
@JSON(strict = true)
public class TodoModelImpl extends BaseModelImpl<Todo> implements TodoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a todo model instance should use the {@link com.instructure.canvas.model.Todo} interface instead.
	 */
	public static final String TABLE_NAME = "CANVAS_Todo";
	public static final Object[][] TABLE_COLUMNS = {
			{ "todoId", Types.BIGINT },
			{ "type_", Types.VARCHAR },
			{ "assignmentName", Types.VARCHAR },
			{ "assignmentDescription", Types.VARCHAR },
			{ "ignore_", Types.VARCHAR },
			{ "ignorePermanently", Types.VARCHAR },
			{ "needsGradingCount", Types.BIGINT },
			{ "contextType", Types.VARCHAR },
			{ "courseId", Types.VARCHAR },
			{ "groupId", Types.VARCHAR },
			{ "htmlUrl", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CANVAS_Todo (todoId LONG not null primary key,type_ VARCHAR(75) null,assignmentName VARCHAR(75) null,assignmentDescription VARCHAR(75) null,ignore_ VARCHAR(75) null,ignorePermanently VARCHAR(75) null,needsGradingCount LONG,contextType VARCHAR(75) null,courseId VARCHAR(75) null,groupId VARCHAR(75) null,htmlUrl VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CANVAS_Todo";
	public static final String ORDER_BY_JPQL = " ORDER BY todo.todoId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CANVAS_Todo.todoId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.instructure.canvas.model.Todo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.instructure.canvas.model.Todo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Todo toModel(TodoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Todo model = new TodoImpl();

		model.setTodoId(soapModel.getTodoId());
		model.setType(soapModel.getType());
		model.setAssignmentName(soapModel.getAssignmentName());
		model.setAssignmentDescription(soapModel.getAssignmentDescription());
		model.setIgnore_(soapModel.getIgnore_());
		model.setIgnorePermanently(soapModel.getIgnorePermanently());
		model.setNeedsGradingCount(soapModel.getNeedsGradingCount());
		model.setContextType(soapModel.getContextType());
		model.setCourseId(soapModel.getCourseId());
		model.setGroupId(soapModel.getGroupId());
		model.setHtmlUrl(soapModel.getHtmlUrl());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Todo> toModels(TodoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Todo> models = new ArrayList<Todo>(soapModels.length);

		for (TodoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.instructure.canvas.model.Todo"));

	public TodoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _todoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTodoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _todoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Todo.class;
	}

	@Override
	public String getModelClassName() {
		return Todo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("todoId", getTodoId());
		attributes.put("type", getType());
		attributes.put("assignmentName", getAssignmentName());
		attributes.put("assignmentDescription", getAssignmentDescription());
		attributes.put("ignore_", getIgnore_());
		attributes.put("ignorePermanently", getIgnorePermanently());
		attributes.put("needsGradingCount", getNeedsGradingCount());
		attributes.put("contextType", getContextType());
		attributes.put("courseId", getCourseId());
		attributes.put("groupId", getGroupId());
		attributes.put("htmlUrl", getHtmlUrl());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long todoId = (Long)attributes.get("todoId");

		if (todoId != null) {
			setTodoId(todoId);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String assignmentName = (String)attributes.get("assignmentName");

		if (assignmentName != null) {
			setAssignmentName(assignmentName);
		}

		String assignmentDescription = (String)attributes.get(
				"assignmentDescription");

		if (assignmentDescription != null) {
			setAssignmentDescription(assignmentDescription);
		}

		String ignore_ = (String)attributes.get("ignore_");

		if (ignore_ != null) {
			setIgnore_(ignore_);
		}

		String ignorePermanently = (String)attributes.get("ignorePermanently");

		if (ignorePermanently != null) {
			setIgnorePermanently(ignorePermanently);
		}

		Long needsGradingCount = (Long)attributes.get("needsGradingCount");

		if (needsGradingCount != null) {
			setNeedsGradingCount(needsGradingCount);
		}

		String contextType = (String)attributes.get("contextType");

		if (contextType != null) {
			setContextType(contextType);
		}

		String courseId = (String)attributes.get("courseId");

		if (courseId != null) {
			setCourseId(courseId);
		}

		String groupId = (String)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String htmlUrl = (String)attributes.get("htmlUrl");

		if (htmlUrl != null) {
			setHtmlUrl(htmlUrl);
		}
	}

	@JSON
	@Override
	public long getTodoId() {
		return _todoId;
	}

	@Override
	public void setTodoId(long todoId) {
		_todoId = todoId;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@JSON
	@Override
	public String getAssignmentName() {
		if (_assignmentName == null) {
			return StringPool.BLANK;
		}
		else {
			return _assignmentName;
		}
	}

	@Override
	public void setAssignmentName(String assignmentName) {
		_assignmentName = assignmentName;
	}

	@JSON
	@Override
	public String getAssignmentDescription() {
		if (_assignmentDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _assignmentDescription;
		}
	}

	@Override
	public void setAssignmentDescription(String assignmentDescription) {
		_assignmentDescription = assignmentDescription;
	}

	@JSON
	@Override
	public String getIgnore_() {
		if (_ignore_ == null) {
			return StringPool.BLANK;
		}
		else {
			return _ignore_;
		}
	}

	@Override
	public void setIgnore_(String ignore_) {
		_ignore_ = ignore_;
	}

	@JSON
	@Override
	public String getIgnorePermanently() {
		if (_ignorePermanently == null) {
			return StringPool.BLANK;
		}
		else {
			return _ignorePermanently;
		}
	}

	@Override
	public void setIgnorePermanently(String ignorePermanently) {
		_ignorePermanently = ignorePermanently;
	}

	@JSON
	@Override
	public long getNeedsGradingCount() {
		return _needsGradingCount;
	}

	@Override
	public void setNeedsGradingCount(long needsGradingCount) {
		_needsGradingCount = needsGradingCount;
	}

	@JSON
	@Override
	public String getContextType() {
		if (_contextType == null) {
			return StringPool.BLANK;
		}
		else {
			return _contextType;
		}
	}

	@Override
	public void setContextType(String contextType) {
		_contextType = contextType;
	}

	@JSON
	@Override
	public String getCourseId() {
		if (_courseId == null) {
			return StringPool.BLANK;
		}
		else {
			return _courseId;
		}
	}

	@Override
	public void setCourseId(String courseId) {
		_courseId = courseId;
	}

	@JSON
	@Override
	public String getGroupId() {
		if (_groupId == null) {
			return StringPool.BLANK;
		}
		else {
			return _groupId;
		}
	}

	@Override
	public void setGroupId(String groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public String getHtmlUrl() {
		if (_htmlUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _htmlUrl;
		}
	}

	@Override
	public void setHtmlUrl(String htmlUrl) {
		_htmlUrl = htmlUrl;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Todo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Todo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Todo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TodoImpl todoImpl = new TodoImpl();

		todoImpl.setTodoId(getTodoId());
		todoImpl.setType(getType());
		todoImpl.setAssignmentName(getAssignmentName());
		todoImpl.setAssignmentDescription(getAssignmentDescription());
		todoImpl.setIgnore_(getIgnore_());
		todoImpl.setIgnorePermanently(getIgnorePermanently());
		todoImpl.setNeedsGradingCount(getNeedsGradingCount());
		todoImpl.setContextType(getContextType());
		todoImpl.setCourseId(getCourseId());
		todoImpl.setGroupId(getGroupId());
		todoImpl.setHtmlUrl(getHtmlUrl());

		todoImpl.resetOriginalValues();

		return todoImpl;
	}

	@Override
	public int compareTo(Todo todo) {
		long primaryKey = todo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Todo)) {
			return false;
		}

		Todo todo = (Todo)obj;

		long primaryKey = todo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Todo> toCacheModel() {
		TodoCacheModel todoCacheModel = new TodoCacheModel();

		todoCacheModel.todoId = getTodoId();

		todoCacheModel.type = getType();

		String type = todoCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			todoCacheModel.type = null;
		}

		todoCacheModel.assignmentName = getAssignmentName();

		String assignmentName = todoCacheModel.assignmentName;

		if ((assignmentName != null) && (assignmentName.length() == 0)) {
			todoCacheModel.assignmentName = null;
		}

		todoCacheModel.assignmentDescription = getAssignmentDescription();

		String assignmentDescription = todoCacheModel.assignmentDescription;

		if ((assignmentDescription != null) &&
				(assignmentDescription.length() == 0)) {
			todoCacheModel.assignmentDescription = null;
		}

		todoCacheModel.ignore_ = getIgnore_();

		String ignore_ = todoCacheModel.ignore_;

		if ((ignore_ != null) && (ignore_.length() == 0)) {
			todoCacheModel.ignore_ = null;
		}

		todoCacheModel.ignorePermanently = getIgnorePermanently();

		String ignorePermanently = todoCacheModel.ignorePermanently;

		if ((ignorePermanently != null) && (ignorePermanently.length() == 0)) {
			todoCacheModel.ignorePermanently = null;
		}

		todoCacheModel.needsGradingCount = getNeedsGradingCount();

		todoCacheModel.contextType = getContextType();

		String contextType = todoCacheModel.contextType;

		if ((contextType != null) && (contextType.length() == 0)) {
			todoCacheModel.contextType = null;
		}

		todoCacheModel.courseId = getCourseId();

		String courseId = todoCacheModel.courseId;

		if ((courseId != null) && (courseId.length() == 0)) {
			todoCacheModel.courseId = null;
		}

		todoCacheModel.groupId = getGroupId();

		String groupId = todoCacheModel.groupId;

		if ((groupId != null) && (groupId.length() == 0)) {
			todoCacheModel.groupId = null;
		}

		todoCacheModel.htmlUrl = getHtmlUrl();

		String htmlUrl = todoCacheModel.htmlUrl;

		if ((htmlUrl != null) && (htmlUrl.length() == 0)) {
			todoCacheModel.htmlUrl = null;
		}

		return todoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{todoId=");
		sb.append(getTodoId());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", assignmentName=");
		sb.append(getAssignmentName());
		sb.append(", assignmentDescription=");
		sb.append(getAssignmentDescription());
		sb.append(", ignore_=");
		sb.append(getIgnore_());
		sb.append(", ignorePermanently=");
		sb.append(getIgnorePermanently());
		sb.append(", needsGradingCount=");
		sb.append(getNeedsGradingCount());
		sb.append(", contextType=");
		sb.append(getContextType());
		sb.append(", courseId=");
		sb.append(getCourseId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", htmlUrl=");
		sb.append(getHtmlUrl());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.instructure.canvas.model.Todo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>todoId</column-name><column-value><![CDATA[");
		sb.append(getTodoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assignmentName</column-name><column-value><![CDATA[");
		sb.append(getAssignmentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assignmentDescription</column-name><column-value><![CDATA[");
		sb.append(getAssignmentDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ignore_</column-name><column-value><![CDATA[");
		sb.append(getIgnore_());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ignorePermanently</column-name><column-value><![CDATA[");
		sb.append(getIgnorePermanently());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>needsGradingCount</column-name><column-value><![CDATA[");
		sb.append(getNeedsGradingCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contextType</column-name><column-value><![CDATA[");
		sb.append(getContextType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseId</column-name><column-value><![CDATA[");
		sb.append(getCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>htmlUrl</column-name><column-value><![CDATA[");
		sb.append(getHtmlUrl());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Todo.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Todo.class };
	private long _todoId;
	private String _type;
	private String _assignmentName;
	private String _assignmentDescription;
	private String _ignore_;
	private String _ignorePermanently;
	private long _needsGradingCount;
	private String _contextType;
	private String _courseId;
	private String _groupId;
	private String _htmlUrl;
	private Todo _escapedModel;
}