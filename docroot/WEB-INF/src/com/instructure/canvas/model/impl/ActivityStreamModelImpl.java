/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.instructure.canvas.model.impl;

import com.instructure.canvas.model.ActivityStream;
import com.instructure.canvas.model.ActivityStreamModel;
import com.instructure.canvas.model.ActivityStreamSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ActivityStream service. Represents a row in the &quot;CANVAS_ActivityStream&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.instructure.canvas.model.ActivityStreamModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ActivityStreamImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ActivityStreamImpl
 * @see com.instructure.canvas.model.ActivityStream
 * @see com.instructure.canvas.model.ActivityStreamModel
 * @generated
 */
@JSON(strict = true)
public class ActivityStreamModelImpl extends BaseModelImpl<ActivityStream>
	implements ActivityStreamModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a activity stream model instance should use the {@link com.instructure.canvas.model.ActivityStream} interface instead.
	 */
	public static final String TABLE_NAME = "CANVAS_ActivityStream";
	public static final Object[][] TABLE_COLUMNS = {
			{ "activityStreamId", Types.BIGINT },
			{ "createdAt", Types.VARCHAR },
			{ "updatedAt", Types.VARCHAR },
			{ "id_", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "message", Types.VARCHAR },
			{ "type_", Types.VARCHAR },
			{ "contextType", Types.VARCHAR },
			{ "courseId", Types.BIGINT },
			{ "groupId", Types.VARCHAR },
			{ "htmlUrl", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CANVAS_ActivityStream (activityStreamId LONG not null primary key,createdAt VARCHAR(75) null,updatedAt VARCHAR(75) null,id_ LONG,title VARCHAR(75) null,message VARCHAR(75) null,type_ VARCHAR(75) null,contextType VARCHAR(75) null,courseId LONG,groupId VARCHAR(75) null,htmlUrl VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CANVAS_ActivityStream";
	public static final String ORDER_BY_JPQL = " ORDER BY activityStream.activityStreamId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CANVAS_ActivityStream.activityStreamId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.instructure.canvas.model.ActivityStream"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.instructure.canvas.model.ActivityStream"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ActivityStream toModel(ActivityStreamSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ActivityStream model = new ActivityStreamImpl();

		model.setActivityStreamId(soapModel.getActivityStreamId());
		model.setCreatedAt(soapModel.getCreatedAt());
		model.setUpdatedAt(soapModel.getUpdatedAt());
		model.setId(soapModel.getId());
		model.setTitle(soapModel.getTitle());
		model.setMessage(soapModel.getMessage());
		model.setType(soapModel.getType());
		model.setContextType(soapModel.getContextType());
		model.setCourseId(soapModel.getCourseId());
		model.setGroupId(soapModel.getGroupId());
		model.setHtmlUrl(soapModel.getHtmlUrl());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ActivityStream> toModels(ActivityStreamSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ActivityStream> models = new ArrayList<ActivityStream>(soapModels.length);

		for (ActivityStreamSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.instructure.canvas.model.ActivityStream"));

	public ActivityStreamModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _activityStreamId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setActivityStreamId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _activityStreamId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ActivityStream.class;
	}

	@Override
	public String getModelClassName() {
		return ActivityStream.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("activityStreamId", getActivityStreamId());
		attributes.put("createdAt", getCreatedAt());
		attributes.put("updatedAt", getUpdatedAt());
		attributes.put("id", getId());
		attributes.put("title", getTitle());
		attributes.put("message", getMessage());
		attributes.put("type", getType());
		attributes.put("contextType", getContextType());
		attributes.put("courseId", getCourseId());
		attributes.put("groupId", getGroupId());
		attributes.put("htmlUrl", getHtmlUrl());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long activityStreamId = (Long)attributes.get("activityStreamId");

		if (activityStreamId != null) {
			setActivityStreamId(activityStreamId);
		}

		String createdAt = (String)attributes.get("createdAt");

		if (createdAt != null) {
			setCreatedAt(createdAt);
		}

		String updatedAt = (String)attributes.get("updatedAt");

		if (updatedAt != null) {
			setUpdatedAt(updatedAt);
		}

		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String message = (String)attributes.get("message");

		if (message != null) {
			setMessage(message);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String contextType = (String)attributes.get("contextType");

		if (contextType != null) {
			setContextType(contextType);
		}

		Long courseId = (Long)attributes.get("courseId");

		if (courseId != null) {
			setCourseId(courseId);
		}

		String groupId = (String)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String htmlUrl = (String)attributes.get("htmlUrl");

		if (htmlUrl != null) {
			setHtmlUrl(htmlUrl);
		}
	}

	@JSON
	@Override
	public long getActivityStreamId() {
		return _activityStreamId;
	}

	@Override
	public void setActivityStreamId(long activityStreamId) {
		_activityStreamId = activityStreamId;
	}

	@JSON
	@Override
	public String getCreatedAt() {
		if (_createdAt == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdAt;
		}
	}

	@Override
	public void setCreatedAt(String createdAt) {
		_createdAt = createdAt;
	}

	@JSON
	@Override
	public String getUpdatedAt() {
		if (_updatedAt == null) {
			return StringPool.BLANK;
		}
		else {
			return _updatedAt;
		}
	}

	@Override
	public void setUpdatedAt(String updatedAt) {
		_updatedAt = updatedAt;
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getMessage() {
		if (_message == null) {
			return StringPool.BLANK;
		}
		else {
			return _message;
		}
	}

	@Override
	public void setMessage(String message) {
		_message = message;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@JSON
	@Override
	public String getContextType() {
		if (_contextType == null) {
			return StringPool.BLANK;
		}
		else {
			return _contextType;
		}
	}

	@Override
	public void setContextType(String contextType) {
		_contextType = contextType;
	}

	@JSON
	@Override
	public long getCourseId() {
		return _courseId;
	}

	@Override
	public void setCourseId(long courseId) {
		_courseId = courseId;
	}

	@JSON
	@Override
	public String getGroupId() {
		if (_groupId == null) {
			return StringPool.BLANK;
		}
		else {
			return _groupId;
		}
	}

	@Override
	public void setGroupId(String groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public String getHtmlUrl() {
		if (_htmlUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _htmlUrl;
		}
	}

	@Override
	public void setHtmlUrl(String htmlUrl) {
		_htmlUrl = htmlUrl;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ActivityStream.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ActivityStream toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ActivityStream)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ActivityStreamImpl activityStreamImpl = new ActivityStreamImpl();

		activityStreamImpl.setActivityStreamId(getActivityStreamId());
		activityStreamImpl.setCreatedAt(getCreatedAt());
		activityStreamImpl.setUpdatedAt(getUpdatedAt());
		activityStreamImpl.setId(getId());
		activityStreamImpl.setTitle(getTitle());
		activityStreamImpl.setMessage(getMessage());
		activityStreamImpl.setType(getType());
		activityStreamImpl.setContextType(getContextType());
		activityStreamImpl.setCourseId(getCourseId());
		activityStreamImpl.setGroupId(getGroupId());
		activityStreamImpl.setHtmlUrl(getHtmlUrl());

		activityStreamImpl.resetOriginalValues();

		return activityStreamImpl;
	}

	@Override
	public int compareTo(ActivityStream activityStream) {
		long primaryKey = activityStream.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ActivityStream)) {
			return false;
		}

		ActivityStream activityStream = (ActivityStream)obj;

		long primaryKey = activityStream.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ActivityStream> toCacheModel() {
		ActivityStreamCacheModel activityStreamCacheModel = new ActivityStreamCacheModel();

		activityStreamCacheModel.activityStreamId = getActivityStreamId();

		activityStreamCacheModel.createdAt = getCreatedAt();

		String createdAt = activityStreamCacheModel.createdAt;

		if ((createdAt != null) && (createdAt.length() == 0)) {
			activityStreamCacheModel.createdAt = null;
		}

		activityStreamCacheModel.updatedAt = getUpdatedAt();

		String updatedAt = activityStreamCacheModel.updatedAt;

		if ((updatedAt != null) && (updatedAt.length() == 0)) {
			activityStreamCacheModel.updatedAt = null;
		}

		activityStreamCacheModel.id = getId();

		activityStreamCacheModel.title = getTitle();

		String title = activityStreamCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			activityStreamCacheModel.title = null;
		}

		activityStreamCacheModel.message = getMessage();

		String message = activityStreamCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			activityStreamCacheModel.message = null;
		}

		activityStreamCacheModel.type = getType();

		String type = activityStreamCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			activityStreamCacheModel.type = null;
		}

		activityStreamCacheModel.contextType = getContextType();

		String contextType = activityStreamCacheModel.contextType;

		if ((contextType != null) && (contextType.length() == 0)) {
			activityStreamCacheModel.contextType = null;
		}

		activityStreamCacheModel.courseId = getCourseId();

		activityStreamCacheModel.groupId = getGroupId();

		String groupId = activityStreamCacheModel.groupId;

		if ((groupId != null) && (groupId.length() == 0)) {
			activityStreamCacheModel.groupId = null;
		}

		activityStreamCacheModel.htmlUrl = getHtmlUrl();

		String htmlUrl = activityStreamCacheModel.htmlUrl;

		if ((htmlUrl != null) && (htmlUrl.length() == 0)) {
			activityStreamCacheModel.htmlUrl = null;
		}

		return activityStreamCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{activityStreamId=");
		sb.append(getActivityStreamId());
		sb.append(", createdAt=");
		sb.append(getCreatedAt());
		sb.append(", updatedAt=");
		sb.append(getUpdatedAt());
		sb.append(", id=");
		sb.append(getId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", message=");
		sb.append(getMessage());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", contextType=");
		sb.append(getContextType());
		sb.append(", courseId=");
		sb.append(getCourseId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", htmlUrl=");
		sb.append(getHtmlUrl());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.instructure.canvas.model.ActivityStream");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>activityStreamId</column-name><column-value><![CDATA[");
		sb.append(getActivityStreamId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdAt</column-name><column-value><![CDATA[");
		sb.append(getCreatedAt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedAt</column-name><column-value><![CDATA[");
		sb.append(getUpdatedAt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>message</column-name><column-value><![CDATA[");
		sb.append(getMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contextType</column-name><column-value><![CDATA[");
		sb.append(getContextType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseId</column-name><column-value><![CDATA[");
		sb.append(getCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>htmlUrl</column-name><column-value><![CDATA[");
		sb.append(getHtmlUrl());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ActivityStream.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ActivityStream.class
		};
	private long _activityStreamId;
	private String _createdAt;
	private String _updatedAt;
	private long _id;
	private String _title;
	private String _message;
	private String _type;
	private String _contextType;
	private long _courseId;
	private String _groupId;
	private String _htmlUrl;
	private ActivityStream _escapedModel;
}