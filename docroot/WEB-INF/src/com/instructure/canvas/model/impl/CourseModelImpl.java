/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.instructure.canvas.model.impl;

import com.instructure.canvas.model.Course;
import com.instructure.canvas.model.CourseModel;
import com.instructure.canvas.model.CourseSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Course service. Represents a row in the &quot;CANVAS_Course&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.instructure.canvas.model.CourseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CourseImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CourseImpl
 * @see com.instructure.canvas.model.Course
 * @see com.instructure.canvas.model.CourseModel
 * @generated
 */
@JSON(strict = true)
public class CourseModelImpl extends BaseModelImpl<Course>
	implements CourseModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a course model instance should use the {@link com.instructure.canvas.model.Course} interface instead.
	 */
	public static final String TABLE_NAME = "CANVAS_Course";
	public static final Object[][] TABLE_COLUMNS = {
			{ "canvasId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "id_", Types.BIGINT },
			{ "enrollments", Types.VARCHAR },
			{ "course_code", Types.VARCHAR },
			{ "sis_course_id", Types.VARCHAR },
			{ "calendar", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "netacadCoreOfferingId", Types.VARCHAR },
			{ "accountId", Types.BIGINT },
			{ "netacadCVLId", Types.VARCHAR },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table CANVAS_Course (canvasId LONG not null primary key,name VARCHAR(75) null,id_ LONG,enrollments VARCHAR(75) null,course_code VARCHAR(75) null,sis_course_id VARCHAR(75) null,calendar VARCHAR(75) null,url VARCHAR(75) null,netacadCoreOfferingId VARCHAR(75) null,accountId LONG,netacadCVLId VARCHAR(75) null,startDate DATE null,endDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table CANVAS_Course";
	public static final String ORDER_BY_JPQL = " ORDER BY course.canvasId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CANVAS_Course.canvasId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.instructure.canvas.model.Course"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.instructure.canvas.model.Course"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.instructure.canvas.model.Course"),
			true);
	public static long ID_COLUMN_BITMASK = 1L;
	public static long NETACADCVLID_COLUMN_BITMASK = 2L;
	public static long NETACADCOREOFFERINGID_COLUMN_BITMASK = 4L;
	public static long CANVASID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Course toModel(CourseSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Course model = new CourseImpl();

		model.setCanvasId(soapModel.getCanvasId());
		model.setName(soapModel.getName());
		model.setId(soapModel.getId());
		model.setEnrollments(soapModel.getEnrollments());
		model.setCourse_code(soapModel.getCourse_code());
		model.setSis_course_id(soapModel.getSis_course_id());
		model.setCalendar(soapModel.getCalendar());
		model.setUrl(soapModel.getUrl());
		model.setNetacadCoreOfferingId(soapModel.getNetacadCoreOfferingId());
		model.setAccountId(soapModel.getAccountId());
		model.setNetacadCVLId(soapModel.getNetacadCVLId());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Course> toModels(CourseSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Course> models = new ArrayList<Course>(soapModels.length);

		for (CourseSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.instructure.canvas.model.Course"));

	public CourseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _canvasId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCanvasId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _canvasId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Course.class;
	}

	@Override
	public String getModelClassName() {
		return Course.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("canvasId", getCanvasId());
		attributes.put("name", getName());
		attributes.put("id", getId());
		attributes.put("enrollments", getEnrollments());
		attributes.put("course_code", getCourse_code());
		attributes.put("sis_course_id", getSis_course_id());
		attributes.put("calendar", getCalendar());
		attributes.put("url", getUrl());
		attributes.put("netacadCoreOfferingId", getNetacadCoreOfferingId());
		attributes.put("accountId", getAccountId());
		attributes.put("netacadCVLId", getNetacadCVLId());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long canvasId = (Long)attributes.get("canvasId");

		if (canvasId != null) {
			setCanvasId(canvasId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String enrollments = (String)attributes.get("enrollments");

		if (enrollments != null) {
			setEnrollments(enrollments);
		}

		String course_code = (String)attributes.get("course_code");

		if (course_code != null) {
			setCourse_code(course_code);
		}

		String sis_course_id = (String)attributes.get("sis_course_id");

		if (sis_course_id != null) {
			setSis_course_id(sis_course_id);
		}

		String calendar = (String)attributes.get("calendar");

		if (calendar != null) {
			setCalendar(calendar);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String netacadCoreOfferingId = (String)attributes.get(
				"netacadCoreOfferingId");

		if (netacadCoreOfferingId != null) {
			setNetacadCoreOfferingId(netacadCoreOfferingId);
		}

		Long accountId = (Long)attributes.get("accountId");

		if (accountId != null) {
			setAccountId(accountId);
		}

		String netacadCVLId = (String)attributes.get("netacadCVLId");

		if (netacadCVLId != null) {
			setNetacadCVLId(netacadCVLId);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}
	}

	@JSON
	@Override
	public long getCanvasId() {
		return _canvasId;
	}

	@Override
	public void setCanvasId(long canvasId) {
		_canvasId = canvasId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask |= ID_COLUMN_BITMASK;

		if (!_setOriginalId) {
			_setOriginalId = true;

			_originalId = _id;
		}

		_id = id;
	}

	public long getOriginalId() {
		return _originalId;
	}

	@JSON
	@Override
	public String getEnrollments() {
		if (_enrollments == null) {
			return StringPool.BLANK;
		}
		else {
			return _enrollments;
		}
	}

	@Override
	public void setEnrollments(String enrollments) {
		_enrollments = enrollments;
	}

	@JSON
	@Override
	public String getCourse_code() {
		if (_course_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _course_code;
		}
	}

	@Override
	public void setCourse_code(String course_code) {
		_course_code = course_code;
	}

	@JSON
	@Override
	public String getSis_course_id() {
		if (_sis_course_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _sis_course_id;
		}
	}

	@Override
	public void setSis_course_id(String sis_course_id) {
		_sis_course_id = sis_course_id;
	}

	@JSON
	@Override
	public String getCalendar() {
		if (_calendar == null) {
			return StringPool.BLANK;
		}
		else {
			return _calendar;
		}
	}

	@Override
	public void setCalendar(String calendar) {
		_calendar = calendar;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@JSON
	@Override
	public String getNetacadCoreOfferingId() {
		if (_netacadCoreOfferingId == null) {
			return StringPool.BLANK;
		}
		else {
			return _netacadCoreOfferingId;
		}
	}

	@Override
	public void setNetacadCoreOfferingId(String netacadCoreOfferingId) {
		_columnBitmask |= NETACADCOREOFFERINGID_COLUMN_BITMASK;

		if (_originalNetacadCoreOfferingId == null) {
			_originalNetacadCoreOfferingId = _netacadCoreOfferingId;
		}

		_netacadCoreOfferingId = netacadCoreOfferingId;
	}

	public String getOriginalNetacadCoreOfferingId() {
		return GetterUtil.getString(_originalNetacadCoreOfferingId);
	}

	@JSON
	@Override
	public long getAccountId() {
		return _accountId;
	}

	@Override
	public void setAccountId(long accountId) {
		_accountId = accountId;
	}

	@JSON
	@Override
	public String getNetacadCVLId() {
		if (_netacadCVLId == null) {
			return StringPool.BLANK;
		}
		else {
			return _netacadCVLId;
		}
	}

	@Override
	public void setNetacadCVLId(String netacadCVLId) {
		_columnBitmask |= NETACADCVLID_COLUMN_BITMASK;

		if (_originalNetacadCVLId == null) {
			_originalNetacadCVLId = _netacadCVLId;
		}

		_netacadCVLId = netacadCVLId;
	}

	public String getOriginalNetacadCVLId() {
		return GetterUtil.getString(_originalNetacadCVLId);
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Course.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Course toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Course)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CourseImpl courseImpl = new CourseImpl();

		courseImpl.setCanvasId(getCanvasId());
		courseImpl.setName(getName());
		courseImpl.setId(getId());
		courseImpl.setEnrollments(getEnrollments());
		courseImpl.setCourse_code(getCourse_code());
		courseImpl.setSis_course_id(getSis_course_id());
		courseImpl.setCalendar(getCalendar());
		courseImpl.setUrl(getUrl());
		courseImpl.setNetacadCoreOfferingId(getNetacadCoreOfferingId());
		courseImpl.setAccountId(getAccountId());
		courseImpl.setNetacadCVLId(getNetacadCVLId());
		courseImpl.setStartDate(getStartDate());
		courseImpl.setEndDate(getEndDate());

		courseImpl.resetOriginalValues();

		return courseImpl;
	}

	@Override
	public int compareTo(Course course) {
		long primaryKey = course.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Course)) {
			return false;
		}

		Course course = (Course)obj;

		long primaryKey = course.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CourseModelImpl courseModelImpl = this;

		courseModelImpl._originalId = courseModelImpl._id;

		courseModelImpl._setOriginalId = false;

		courseModelImpl._originalNetacadCoreOfferingId = courseModelImpl._netacadCoreOfferingId;

		courseModelImpl._originalNetacadCVLId = courseModelImpl._netacadCVLId;

		courseModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Course> toCacheModel() {
		CourseCacheModel courseCacheModel = new CourseCacheModel();

		courseCacheModel.canvasId = getCanvasId();

		courseCacheModel.name = getName();

		String name = courseCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			courseCacheModel.name = null;
		}

		courseCacheModel.id = getId();

		courseCacheModel.enrollments = getEnrollments();

		String enrollments = courseCacheModel.enrollments;

		if ((enrollments != null) && (enrollments.length() == 0)) {
			courseCacheModel.enrollments = null;
		}

		courseCacheModel.course_code = getCourse_code();

		String course_code = courseCacheModel.course_code;

		if ((course_code != null) && (course_code.length() == 0)) {
			courseCacheModel.course_code = null;
		}

		courseCacheModel.sis_course_id = getSis_course_id();

		String sis_course_id = courseCacheModel.sis_course_id;

		if ((sis_course_id != null) && (sis_course_id.length() == 0)) {
			courseCacheModel.sis_course_id = null;
		}

		courseCacheModel.calendar = getCalendar();

		String calendar = courseCacheModel.calendar;

		if ((calendar != null) && (calendar.length() == 0)) {
			courseCacheModel.calendar = null;
		}

		courseCacheModel.url = getUrl();

		String url = courseCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			courseCacheModel.url = null;
		}

		courseCacheModel.netacadCoreOfferingId = getNetacadCoreOfferingId();

		String netacadCoreOfferingId = courseCacheModel.netacadCoreOfferingId;

		if ((netacadCoreOfferingId != null) &&
				(netacadCoreOfferingId.length() == 0)) {
			courseCacheModel.netacadCoreOfferingId = null;
		}

		courseCacheModel.accountId = getAccountId();

		courseCacheModel.netacadCVLId = getNetacadCVLId();

		String netacadCVLId = courseCacheModel.netacadCVLId;

		if ((netacadCVLId != null) && (netacadCVLId.length() == 0)) {
			courseCacheModel.netacadCVLId = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			courseCacheModel.startDate = startDate.getTime();
		}
		else {
			courseCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			courseCacheModel.endDate = endDate.getTime();
		}
		else {
			courseCacheModel.endDate = Long.MIN_VALUE;
		}

		return courseCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{canvasId=");
		sb.append(getCanvasId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", id=");
		sb.append(getId());
		sb.append(", enrollments=");
		sb.append(getEnrollments());
		sb.append(", course_code=");
		sb.append(getCourse_code());
		sb.append(", sis_course_id=");
		sb.append(getSis_course_id());
		sb.append(", calendar=");
		sb.append(getCalendar());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", netacadCoreOfferingId=");
		sb.append(getNetacadCoreOfferingId());
		sb.append(", accountId=");
		sb.append(getAccountId());
		sb.append(", netacadCVLId=");
		sb.append(getNetacadCVLId());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.instructure.canvas.model.Course");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>canvasId</column-name><column-value><![CDATA[");
		sb.append(getCanvasId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>enrollments</column-name><column-value><![CDATA[");
		sb.append(getEnrollments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>course_code</column-name><column-value><![CDATA[");
		sb.append(getCourse_code());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sis_course_id</column-name><column-value><![CDATA[");
		sb.append(getSis_course_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calendar</column-name><column-value><![CDATA[");
		sb.append(getCalendar());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netacadCoreOfferingId</column-name><column-value><![CDATA[");
		sb.append(getNetacadCoreOfferingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accountId</column-name><column-value><![CDATA[");
		sb.append(getAccountId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netacadCVLId</column-name><column-value><![CDATA[");
		sb.append(getNetacadCVLId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Course.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Course.class };
	private long _canvasId;
	private String _name;
	private long _id;
	private long _originalId;
	private boolean _setOriginalId;
	private String _enrollments;
	private String _course_code;
	private String _sis_course_id;
	private String _calendar;
	private String _url;
	private String _netacadCoreOfferingId;
	private String _originalNetacadCoreOfferingId;
	private long _accountId;
	private String _netacadCVLId;
	private String _originalNetacadCVLId;
	private Date _startDate;
	private Date _endDate;
	private long _columnBitmask;
	private Course _escapedModel;
}