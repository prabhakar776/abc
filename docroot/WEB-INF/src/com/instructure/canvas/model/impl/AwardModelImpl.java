/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.instructure.canvas.model.impl;

import com.instructure.canvas.model.Award;
import com.instructure.canvas.model.AwardModel;
import com.instructure.canvas.model.AwardSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Award service. Represents a row in the &quot;CANVAS_Award&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.instructure.canvas.model.AwardModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AwardImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AwardImpl
 * @see com.instructure.canvas.model.Award
 * @see com.instructure.canvas.model.AwardModel
 * @generated
 */
@JSON(strict = true)
public class AwardModelImpl extends BaseModelImpl<Award> implements AwardModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a award model instance should use the {@link com.instructure.canvas.model.Award} interface instead.
	 */
	public static final String TABLE_NAME = "CANVAS_Award";
	public static final Object[][] TABLE_COLUMNS = {
			{ "awardId", Types.BIGINT },
			{ "cvlId", Types.VARCHAR },
			{ "cvlName", Types.VARCHAR },
			{ "score", Types.DOUBLE },
			{ "letterArticleId", Types.BIGINT },
			{ "certificateArticleId", Types.BIGINT },
			{ "active_", Types.BOOLEAN },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table CANVAS_Award (awardId LONG not null primary key,cvlId VARCHAR(75) null,cvlName VARCHAR(75) null,score DOUBLE,letterArticleId LONG,certificateArticleId LONG,active_ BOOLEAN,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table CANVAS_Award";
	public static final String ORDER_BY_JPQL = " ORDER BY award.awardId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CANVAS_Award.awardId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.instructure.canvas.model.Award"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.instructure.canvas.model.Award"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.instructure.canvas.model.Award"),
			true);
	public static long ACTIVE_COLUMN_BITMASK = 1L;
	public static long CVLID_COLUMN_BITMASK = 2L;
	public static long CVLNAME_COLUMN_BITMASK = 4L;
	public static long AWARDID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Award toModel(AwardSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Award model = new AwardImpl();

		model.setAwardId(soapModel.getAwardId());
		model.setCvlId(soapModel.getCvlId());
		model.setCvlName(soapModel.getCvlName());
		model.setScore(soapModel.getScore());
		model.setLetterArticleId(soapModel.getLetterArticleId());
		model.setCertificateArticleId(soapModel.getCertificateArticleId());
		model.setActive(soapModel.getActive());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Award> toModels(AwardSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Award> models = new ArrayList<Award>(soapModels.length);

		for (AwardSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.instructure.canvas.model.Award"));

	public AwardModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _awardId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAwardId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _awardId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Award.class;
	}

	@Override
	public String getModelClassName() {
		return Award.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("awardId", getAwardId());
		attributes.put("cvlId", getCvlId());
		attributes.put("cvlName", getCvlName());
		attributes.put("score", getScore());
		attributes.put("letterArticleId", getLetterArticleId());
		attributes.put("certificateArticleId", getCertificateArticleId());
		attributes.put("active", getActive());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long awardId = (Long)attributes.get("awardId");

		if (awardId != null) {
			setAwardId(awardId);
		}

		String cvlId = (String)attributes.get("cvlId");

		if (cvlId != null) {
			setCvlId(cvlId);
		}

		String cvlName = (String)attributes.get("cvlName");

		if (cvlName != null) {
			setCvlName(cvlName);
		}

		Double score = (Double)attributes.get("score");

		if (score != null) {
			setScore(score);
		}

		Long letterArticleId = (Long)attributes.get("letterArticleId");

		if (letterArticleId != null) {
			setLetterArticleId(letterArticleId);
		}

		Long certificateArticleId = (Long)attributes.get("certificateArticleId");

		if (certificateArticleId != null) {
			setCertificateArticleId(certificateArticleId);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public long getAwardId() {
		return _awardId;
	}

	@Override
	public void setAwardId(long awardId) {
		_awardId = awardId;
	}

	@JSON
	@Override
	public String getCvlId() {
		if (_cvlId == null) {
			return StringPool.BLANK;
		}
		else {
			return _cvlId;
		}
	}

	@Override
	public void setCvlId(String cvlId) {
		_columnBitmask |= CVLID_COLUMN_BITMASK;

		if (_originalCvlId == null) {
			_originalCvlId = _cvlId;
		}

		_cvlId = cvlId;
	}

	public String getOriginalCvlId() {
		return GetterUtil.getString(_originalCvlId);
	}

	@JSON
	@Override
	public String getCvlName() {
		if (_cvlName == null) {
			return StringPool.BLANK;
		}
		else {
			return _cvlName;
		}
	}

	@Override
	public void setCvlName(String cvlName) {
		_columnBitmask |= CVLNAME_COLUMN_BITMASK;

		if (_originalCvlName == null) {
			_originalCvlName = _cvlName;
		}

		_cvlName = cvlName;
	}

	public String getOriginalCvlName() {
		return GetterUtil.getString(_originalCvlName);
	}

	@JSON
	@Override
	public double getScore() {
		return _score;
	}

	@Override
	public void setScore(double score) {
		_score = score;
	}

	@JSON
	@Override
	public long getLetterArticleId() {
		return _letterArticleId;
	}

	@Override
	public void setLetterArticleId(long letterArticleId) {
		_letterArticleId = letterArticleId;
	}

	@JSON
	@Override
	public long getCertificateArticleId() {
		return _certificateArticleId;
	}

	@Override
	public void setCertificateArticleId(long certificateArticleId) {
		_certificateArticleId = certificateArticleId;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_columnBitmask |= ACTIVE_COLUMN_BITMASK;

		if (!_setOriginalActive) {
			_setOriginalActive = true;

			_originalActive = _active;
		}

		_active = active;
	}

	public boolean getOriginalActive() {
		return _originalActive;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Award.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Award toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Award)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AwardImpl awardImpl = new AwardImpl();

		awardImpl.setAwardId(getAwardId());
		awardImpl.setCvlId(getCvlId());
		awardImpl.setCvlName(getCvlName());
		awardImpl.setScore(getScore());
		awardImpl.setLetterArticleId(getLetterArticleId());
		awardImpl.setCertificateArticleId(getCertificateArticleId());
		awardImpl.setActive(getActive());
		awardImpl.setCreateDate(getCreateDate());
		awardImpl.setModifiedDate(getModifiedDate());

		awardImpl.resetOriginalValues();

		return awardImpl;
	}

	@Override
	public int compareTo(Award award) {
		long primaryKey = award.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Award)) {
			return false;
		}

		Award award = (Award)obj;

		long primaryKey = award.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AwardModelImpl awardModelImpl = this;

		awardModelImpl._originalCvlId = awardModelImpl._cvlId;

		awardModelImpl._originalCvlName = awardModelImpl._cvlName;

		awardModelImpl._originalActive = awardModelImpl._active;

		awardModelImpl._setOriginalActive = false;

		awardModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Award> toCacheModel() {
		AwardCacheModel awardCacheModel = new AwardCacheModel();

		awardCacheModel.awardId = getAwardId();

		awardCacheModel.cvlId = getCvlId();

		String cvlId = awardCacheModel.cvlId;

		if ((cvlId != null) && (cvlId.length() == 0)) {
			awardCacheModel.cvlId = null;
		}

		awardCacheModel.cvlName = getCvlName();

		String cvlName = awardCacheModel.cvlName;

		if ((cvlName != null) && (cvlName.length() == 0)) {
			awardCacheModel.cvlName = null;
		}

		awardCacheModel.score = getScore();

		awardCacheModel.letterArticleId = getLetterArticleId();

		awardCacheModel.certificateArticleId = getCertificateArticleId();

		awardCacheModel.active = getActive();

		Date createDate = getCreateDate();

		if (createDate != null) {
			awardCacheModel.createDate = createDate.getTime();
		}
		else {
			awardCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			awardCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			awardCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return awardCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{awardId=");
		sb.append(getAwardId());
		sb.append(", cvlId=");
		sb.append(getCvlId());
		sb.append(", cvlName=");
		sb.append(getCvlName());
		sb.append(", score=");
		sb.append(getScore());
		sb.append(", letterArticleId=");
		sb.append(getLetterArticleId());
		sb.append(", certificateArticleId=");
		sb.append(getCertificateArticleId());
		sb.append(", active=");
		sb.append(getActive());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.instructure.canvas.model.Award");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>awardId</column-name><column-value><![CDATA[");
		sb.append(getAwardId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cvlId</column-name><column-value><![CDATA[");
		sb.append(getCvlId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cvlName</column-name><column-value><![CDATA[");
		sb.append(getCvlName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>score</column-name><column-value><![CDATA[");
		sb.append(getScore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>letterArticleId</column-name><column-value><![CDATA[");
		sb.append(getLetterArticleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateArticleId</column-name><column-value><![CDATA[");
		sb.append(getCertificateArticleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Award.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Award.class };
	private long _awardId;
	private String _cvlId;
	private String _originalCvlId;
	private String _cvlName;
	private String _originalCvlName;
	private double _score;
	private long _letterArticleId;
	private long _certificateArticleId;
	private boolean _active;
	private boolean _originalActive;
	private boolean _setOriginalActive;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private Award _escapedModel;
}