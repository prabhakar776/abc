/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.instructure.canvas.model.impl;

import com.instructure.canvas.model.Submission;
import com.instructure.canvas.model.SubmissionModel;
import com.instructure.canvas.model.SubmissionSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Submission service. Represents a row in the &quot;CANVAS_Submission&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.instructure.canvas.model.SubmissionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SubmissionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SubmissionImpl
 * @see com.instructure.canvas.model.Submission
 * @see com.instructure.canvas.model.SubmissionModel
 * @generated
 */
@JSON(strict = true)
public class SubmissionModelImpl extends BaseModelImpl<Submission>
	implements SubmissionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a submission model instance should use the {@link com.instructure.canvas.model.Submission} interface instead.
	 */
	public static final String TABLE_NAME = "CANVAS_Submission";
	public static final Object[][] TABLE_COLUMNS = {
			{ "submissionId", Types.BIGINT },
			{ "assignmentId", Types.BIGINT },
			{ "courseId", Types.BIGINT },
			{ "attempt", Types.INTEGER },
			{ "grade", Types.VARCHAR },
			{ "htmlUrl", Types.VARCHAR },
			{ "score", Types.DOUBLE },
			{ "submissionDate", Types.VARCHAR },
			{ "graderId", Types.VARCHAR },
			{ "userId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table CANVAS_Submission (submissionId LONG not null primary key,assignmentId LONG,courseId LONG,attempt INTEGER,grade VARCHAR(75) null,htmlUrl VARCHAR(75) null,score DOUBLE,submissionDate VARCHAR(75) null,graderId VARCHAR(75) null,userId LONG)";
	public static final String TABLE_SQL_DROP = "drop table CANVAS_Submission";
	public static final String ORDER_BY_JPQL = " ORDER BY submission.submissionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CANVAS_Submission.submissionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.instructure.canvas.model.Submission"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.instructure.canvas.model.Submission"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Submission toModel(SubmissionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Submission model = new SubmissionImpl();

		model.setSubmissionId(soapModel.getSubmissionId());
		model.setAssignmentId(soapModel.getAssignmentId());
		model.setCourseId(soapModel.getCourseId());
		model.setAttempt(soapModel.getAttempt());
		model.setGrade(soapModel.getGrade());
		model.setHtmlUrl(soapModel.getHtmlUrl());
		model.setScore(soapModel.getScore());
		model.setSubmissionDate(soapModel.getSubmissionDate());
		model.setGraderId(soapModel.getGraderId());
		model.setUserId(soapModel.getUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Submission> toModels(SubmissionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Submission> models = new ArrayList<Submission>(soapModels.length);

		for (SubmissionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.instructure.canvas.model.Submission"));

	public SubmissionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _submissionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSubmissionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _submissionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Submission.class;
	}

	@Override
	public String getModelClassName() {
		return Submission.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("submissionId", getSubmissionId());
		attributes.put("assignmentId", getAssignmentId());
		attributes.put("courseId", getCourseId());
		attributes.put("attempt", getAttempt());
		attributes.put("grade", getGrade());
		attributes.put("htmlUrl", getHtmlUrl());
		attributes.put("score", getScore());
		attributes.put("submissionDate", getSubmissionDate());
		attributes.put("graderId", getGraderId());
		attributes.put("userId", getUserId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long submissionId = (Long)attributes.get("submissionId");

		if (submissionId != null) {
			setSubmissionId(submissionId);
		}

		Long assignmentId = (Long)attributes.get("assignmentId");

		if (assignmentId != null) {
			setAssignmentId(assignmentId);
		}

		Long courseId = (Long)attributes.get("courseId");

		if (courseId != null) {
			setCourseId(courseId);
		}

		Integer attempt = (Integer)attributes.get("attempt");

		if (attempt != null) {
			setAttempt(attempt);
		}

		String grade = (String)attributes.get("grade");

		if (grade != null) {
			setGrade(grade);
		}

		String htmlUrl = (String)attributes.get("htmlUrl");

		if (htmlUrl != null) {
			setHtmlUrl(htmlUrl);
		}

		Double score = (Double)attributes.get("score");

		if (score != null) {
			setScore(score);
		}

		String submissionDate = (String)attributes.get("submissionDate");

		if (submissionDate != null) {
			setSubmissionDate(submissionDate);
		}

		String graderId = (String)attributes.get("graderId");

		if (graderId != null) {
			setGraderId(graderId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}
	}

	@JSON
	@Override
	public long getSubmissionId() {
		return _submissionId;
	}

	@Override
	public void setSubmissionId(long submissionId) {
		_submissionId = submissionId;
	}

	@JSON
	@Override
	public long getAssignmentId() {
		return _assignmentId;
	}

	@Override
	public void setAssignmentId(long assignmentId) {
		_assignmentId = assignmentId;
	}

	@JSON
	@Override
	public long getCourseId() {
		return _courseId;
	}

	@Override
	public void setCourseId(long courseId) {
		_courseId = courseId;
	}

	@JSON
	@Override
	public int getAttempt() {
		return _attempt;
	}

	@Override
	public void setAttempt(int attempt) {
		_attempt = attempt;
	}

	@JSON
	@Override
	public String getGrade() {
		if (_grade == null) {
			return StringPool.BLANK;
		}
		else {
			return _grade;
		}
	}

	@Override
	public void setGrade(String grade) {
		_grade = grade;
	}

	@JSON
	@Override
	public String getHtmlUrl() {
		if (_htmlUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _htmlUrl;
		}
	}

	@Override
	public void setHtmlUrl(String htmlUrl) {
		_htmlUrl = htmlUrl;
	}

	@JSON
	@Override
	public double getScore() {
		return _score;
	}

	@Override
	public void setScore(double score) {
		_score = score;
	}

	@JSON
	@Override
	public String getSubmissionDate() {
		if (_submissionDate == null) {
			return StringPool.BLANK;
		}
		else {
			return _submissionDate;
		}
	}

	@Override
	public void setSubmissionDate(String submissionDate) {
		_submissionDate = submissionDate;
	}

	@JSON
	@Override
	public String getGraderId() {
		if (_graderId == null) {
			return StringPool.BLANK;
		}
		else {
			return _graderId;
		}
	}

	@Override
	public void setGraderId(String graderId) {
		_graderId = graderId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Submission.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Submission toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Submission)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SubmissionImpl submissionImpl = new SubmissionImpl();

		submissionImpl.setSubmissionId(getSubmissionId());
		submissionImpl.setAssignmentId(getAssignmentId());
		submissionImpl.setCourseId(getCourseId());
		submissionImpl.setAttempt(getAttempt());
		submissionImpl.setGrade(getGrade());
		submissionImpl.setHtmlUrl(getHtmlUrl());
		submissionImpl.setScore(getScore());
		submissionImpl.setSubmissionDate(getSubmissionDate());
		submissionImpl.setGraderId(getGraderId());
		submissionImpl.setUserId(getUserId());

		submissionImpl.resetOriginalValues();

		return submissionImpl;
	}

	@Override
	public int compareTo(Submission submission) {
		long primaryKey = submission.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Submission)) {
			return false;
		}

		Submission submission = (Submission)obj;

		long primaryKey = submission.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Submission> toCacheModel() {
		SubmissionCacheModel submissionCacheModel = new SubmissionCacheModel();

		submissionCacheModel.submissionId = getSubmissionId();

		submissionCacheModel.assignmentId = getAssignmentId();

		submissionCacheModel.courseId = getCourseId();

		submissionCacheModel.attempt = getAttempt();

		submissionCacheModel.grade = getGrade();

		String grade = submissionCacheModel.grade;

		if ((grade != null) && (grade.length() == 0)) {
			submissionCacheModel.grade = null;
		}

		submissionCacheModel.htmlUrl = getHtmlUrl();

		String htmlUrl = submissionCacheModel.htmlUrl;

		if ((htmlUrl != null) && (htmlUrl.length() == 0)) {
			submissionCacheModel.htmlUrl = null;
		}

		submissionCacheModel.score = getScore();

		submissionCacheModel.submissionDate = getSubmissionDate();

		String submissionDate = submissionCacheModel.submissionDate;

		if ((submissionDate != null) && (submissionDate.length() == 0)) {
			submissionCacheModel.submissionDate = null;
		}

		submissionCacheModel.graderId = getGraderId();

		String graderId = submissionCacheModel.graderId;

		if ((graderId != null) && (graderId.length() == 0)) {
			submissionCacheModel.graderId = null;
		}

		submissionCacheModel.userId = getUserId();

		return submissionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{submissionId=");
		sb.append(getSubmissionId());
		sb.append(", assignmentId=");
		sb.append(getAssignmentId());
		sb.append(", courseId=");
		sb.append(getCourseId());
		sb.append(", attempt=");
		sb.append(getAttempt());
		sb.append(", grade=");
		sb.append(getGrade());
		sb.append(", htmlUrl=");
		sb.append(getHtmlUrl());
		sb.append(", score=");
		sb.append(getScore());
		sb.append(", submissionDate=");
		sb.append(getSubmissionDate());
		sb.append(", graderId=");
		sb.append(getGraderId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.instructure.canvas.model.Submission");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>submissionId</column-name><column-value><![CDATA[");
		sb.append(getSubmissionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assignmentId</column-name><column-value><![CDATA[");
		sb.append(getAssignmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseId</column-name><column-value><![CDATA[");
		sb.append(getCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attempt</column-name><column-value><![CDATA[");
		sb.append(getAttempt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grade</column-name><column-value><![CDATA[");
		sb.append(getGrade());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>htmlUrl</column-name><column-value><![CDATA[");
		sb.append(getHtmlUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>score</column-name><column-value><![CDATA[");
		sb.append(getScore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submissionDate</column-name><column-value><![CDATA[");
		sb.append(getSubmissionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>graderId</column-name><column-value><![CDATA[");
		sb.append(getGraderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Submission.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Submission.class
		};
	private long _submissionId;
	private long _assignmentId;
	private long _courseId;
	private int _attempt;
	private String _grade;
	private String _htmlUrl;
	private double _score;
	private String _submissionDate;
	private String _graderId;
	private long _userId;
	private String _userUuid;
	private Submission _escapedModel;
}