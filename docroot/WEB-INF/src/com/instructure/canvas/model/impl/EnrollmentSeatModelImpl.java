/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.instructure.canvas.model.impl;

import com.instructure.canvas.model.EnrollmentSeat;
import com.instructure.canvas.model.EnrollmentSeatModel;
import com.instructure.canvas.model.EnrollmentSeatSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EnrollmentSeat service. Represents a row in the &quot;CANVAS_EnrollmentSeat&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.instructure.canvas.model.EnrollmentSeatModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EnrollmentSeatImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EnrollmentSeatImpl
 * @see com.instructure.canvas.model.EnrollmentSeat
 * @see com.instructure.canvas.model.EnrollmentSeatModel
 * @generated
 */
@JSON(strict = true)
public class EnrollmentSeatModelImpl extends BaseModelImpl<EnrollmentSeat>
	implements EnrollmentSeatModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a enrollment seat model instance should use the {@link com.instructure.canvas.model.EnrollmentSeat} interface instead.
	 */
	public static final String TABLE_NAME = "CANVAS_EnrollmentSeat";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "token", Types.VARCHAR },
			{ "rootAccountId", Types.VARCHAR },
			{ "courseId", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "redeemDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table CANVAS_EnrollmentSeat (id_ LONG not null primary key,token VARCHAR(75) null,rootAccountId VARCHAR(75) null,courseId VARCHAR(75) null,userId LONG,createDate DATE null,redeemDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table CANVAS_EnrollmentSeat";
	public static final String ORDER_BY_JPQL = " ORDER BY enrollmentSeat.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CANVAS_EnrollmentSeat.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.instructure.canvas.model.EnrollmentSeat"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.instructure.canvas.model.EnrollmentSeat"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.instructure.canvas.model.EnrollmentSeat"),
			true);
	public static long COURSEID_COLUMN_BITMASK = 1L;
	public static long TOKEN_COLUMN_BITMASK = 2L;
	public static long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EnrollmentSeat toModel(EnrollmentSeatSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EnrollmentSeat model = new EnrollmentSeatImpl();

		model.setId(soapModel.getId());
		model.setToken(soapModel.getToken());
		model.setRootAccountId(soapModel.getRootAccountId());
		model.setCourseId(soapModel.getCourseId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setRedeemDate(soapModel.getRedeemDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EnrollmentSeat> toModels(EnrollmentSeatSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EnrollmentSeat> models = new ArrayList<EnrollmentSeat>(soapModels.length);

		for (EnrollmentSeatSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.instructure.canvas.model.EnrollmentSeat"));

	public EnrollmentSeatModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EnrollmentSeat.class;
	}

	@Override
	public String getModelClassName() {
		return EnrollmentSeat.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("token", getToken());
		attributes.put("rootAccountId", getRootAccountId());
		attributes.put("courseId", getCourseId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("redeemDate", getRedeemDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String token = (String)attributes.get("token");

		if (token != null) {
			setToken(token);
		}

		String rootAccountId = (String)attributes.get("rootAccountId");

		if (rootAccountId != null) {
			setRootAccountId(rootAccountId);
		}

		String courseId = (String)attributes.get("courseId");

		if (courseId != null) {
			setCourseId(courseId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date redeemDate = (Date)attributes.get("redeemDate");

		if (redeemDate != null) {
			setRedeemDate(redeemDate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getToken() {
		if (_token == null) {
			return StringPool.BLANK;
		}
		else {
			return _token;
		}
	}

	@Override
	public void setToken(String token) {
		_columnBitmask |= TOKEN_COLUMN_BITMASK;

		if (_originalToken == null) {
			_originalToken = _token;
		}

		_token = token;
	}

	public String getOriginalToken() {
		return GetterUtil.getString(_originalToken);
	}

	@JSON
	@Override
	public String getRootAccountId() {
		if (_rootAccountId == null) {
			return StringPool.BLANK;
		}
		else {
			return _rootAccountId;
		}
	}

	@Override
	public void setRootAccountId(String rootAccountId) {
		_rootAccountId = rootAccountId;
	}

	@JSON
	@Override
	public String getCourseId() {
		if (_courseId == null) {
			return StringPool.BLANK;
		}
		else {
			return _courseId;
		}
	}

	@Override
	public void setCourseId(String courseId) {
		_columnBitmask |= COURSEID_COLUMN_BITMASK;

		if (_originalCourseId == null) {
			_originalCourseId = _courseId;
		}

		_courseId = courseId;
	}

	public String getOriginalCourseId() {
		return GetterUtil.getString(_originalCourseId);
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getRedeemDate() {
		return _redeemDate;
	}

	@Override
	public void setRedeemDate(Date redeemDate) {
		_redeemDate = redeemDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EnrollmentSeat.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EnrollmentSeat toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EnrollmentSeat)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EnrollmentSeatImpl enrollmentSeatImpl = new EnrollmentSeatImpl();

		enrollmentSeatImpl.setId(getId());
		enrollmentSeatImpl.setToken(getToken());
		enrollmentSeatImpl.setRootAccountId(getRootAccountId());
		enrollmentSeatImpl.setCourseId(getCourseId());
		enrollmentSeatImpl.setUserId(getUserId());
		enrollmentSeatImpl.setCreateDate(getCreateDate());
		enrollmentSeatImpl.setRedeemDate(getRedeemDate());

		enrollmentSeatImpl.resetOriginalValues();

		return enrollmentSeatImpl;
	}

	@Override
	public int compareTo(EnrollmentSeat enrollmentSeat) {
		long primaryKey = enrollmentSeat.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EnrollmentSeat)) {
			return false;
		}

		EnrollmentSeat enrollmentSeat = (EnrollmentSeat)obj;

		long primaryKey = enrollmentSeat.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EnrollmentSeatModelImpl enrollmentSeatModelImpl = this;

		enrollmentSeatModelImpl._originalToken = enrollmentSeatModelImpl._token;

		enrollmentSeatModelImpl._originalCourseId = enrollmentSeatModelImpl._courseId;

		enrollmentSeatModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EnrollmentSeat> toCacheModel() {
		EnrollmentSeatCacheModel enrollmentSeatCacheModel = new EnrollmentSeatCacheModel();

		enrollmentSeatCacheModel.id = getId();

		enrollmentSeatCacheModel.token = getToken();

		String token = enrollmentSeatCacheModel.token;

		if ((token != null) && (token.length() == 0)) {
			enrollmentSeatCacheModel.token = null;
		}

		enrollmentSeatCacheModel.rootAccountId = getRootAccountId();

		String rootAccountId = enrollmentSeatCacheModel.rootAccountId;

		if ((rootAccountId != null) && (rootAccountId.length() == 0)) {
			enrollmentSeatCacheModel.rootAccountId = null;
		}

		enrollmentSeatCacheModel.courseId = getCourseId();

		String courseId = enrollmentSeatCacheModel.courseId;

		if ((courseId != null) && (courseId.length() == 0)) {
			enrollmentSeatCacheModel.courseId = null;
		}

		enrollmentSeatCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			enrollmentSeatCacheModel.createDate = createDate.getTime();
		}
		else {
			enrollmentSeatCacheModel.createDate = Long.MIN_VALUE;
		}

		Date redeemDate = getRedeemDate();

		if (redeemDate != null) {
			enrollmentSeatCacheModel.redeemDate = redeemDate.getTime();
		}
		else {
			enrollmentSeatCacheModel.redeemDate = Long.MIN_VALUE;
		}

		return enrollmentSeatCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", token=");
		sb.append(getToken());
		sb.append(", rootAccountId=");
		sb.append(getRootAccountId());
		sb.append(", courseId=");
		sb.append(getCourseId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", redeemDate=");
		sb.append(getRedeemDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.instructure.canvas.model.EnrollmentSeat");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>token</column-name><column-value><![CDATA[");
		sb.append(getToken());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rootAccountId</column-name><column-value><![CDATA[");
		sb.append(getRootAccountId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseId</column-name><column-value><![CDATA[");
		sb.append(getCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>redeemDate</column-name><column-value><![CDATA[");
		sb.append(getRedeemDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EnrollmentSeat.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EnrollmentSeat.class
		};
	private long _id;
	private String _token;
	private String _originalToken;
	private String _rootAccountId;
	private String _courseId;
	private String _originalCourseId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _redeemDate;
	private long _columnBitmask;
	private EnrollmentSeat _escapedModel;
}