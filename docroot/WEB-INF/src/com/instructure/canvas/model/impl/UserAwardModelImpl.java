/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.instructure.canvas.model.impl;

import com.instructure.canvas.model.UserAward;
import com.instructure.canvas.model.UserAwardModel;
import com.instructure.canvas.model.UserAwardSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UserAward service. Represents a row in the &quot;CANVAS_UserAward&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.instructure.canvas.model.UserAwardModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserAwardImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserAwardImpl
 * @see com.instructure.canvas.model.UserAward
 * @see com.instructure.canvas.model.UserAwardModel
 * @generated
 */
@JSON(strict = true)
public class UserAwardModelImpl extends BaseModelImpl<UserAward>
	implements UserAwardModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user award model instance should use the {@link com.instructure.canvas.model.UserAward} interface instead.
	 */
	public static final String TABLE_NAME = "CANVAS_UserAward";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "canvasUserId", Types.BIGINT },
			{ "courseId", Types.BIGINT },
			{ "externalId", Types.BIGINT },
			{ "certId", Types.VARCHAR },
			{ "letter", Types.BOOLEAN },
			{ "createDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table CANVAS_UserAward (id_ LONG not null primary key,canvasUserId LONG,courseId LONG,externalId LONG,certId VARCHAR(75) null,letter BOOLEAN,createDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table CANVAS_UserAward";
	public static final String ORDER_BY_JPQL = " ORDER BY userAward.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CANVAS_UserAward.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.instructure.canvas.model.UserAward"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.instructure.canvas.model.UserAward"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.instructure.canvas.model.UserAward"),
			true);
	public static long CANVASUSERID_COLUMN_BITMASK = 1L;
	public static long CERTID_COLUMN_BITMASK = 2L;
	public static long COURSEID_COLUMN_BITMASK = 4L;
	public static long LETTER_COLUMN_BITMASK = 8L;
	public static long ID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserAward toModel(UserAwardSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserAward model = new UserAwardImpl();

		model.setId(soapModel.getId());
		model.setCanvasUserId(soapModel.getCanvasUserId());
		model.setCourseId(soapModel.getCourseId());
		model.setExternalId(soapModel.getExternalId());
		model.setCertId(soapModel.getCertId());
		model.setLetter(soapModel.getLetter());
		model.setCreateDate(soapModel.getCreateDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserAward> toModels(UserAwardSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserAward> models = new ArrayList<UserAward>(soapModels.length);

		for (UserAwardSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.instructure.canvas.model.UserAward"));

	public UserAwardModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserAward.class;
	}

	@Override
	public String getModelClassName() {
		return UserAward.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("canvasUserId", getCanvasUserId());
		attributes.put("courseId", getCourseId());
		attributes.put("externalId", getExternalId());
		attributes.put("certId", getCertId());
		attributes.put("letter", getLetter());
		attributes.put("createDate", getCreateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long canvasUserId = (Long)attributes.get("canvasUserId");

		if (canvasUserId != null) {
			setCanvasUserId(canvasUserId);
		}

		Long courseId = (Long)attributes.get("courseId");

		if (courseId != null) {
			setCourseId(courseId);
		}

		Long externalId = (Long)attributes.get("externalId");

		if (externalId != null) {
			setExternalId(externalId);
		}

		String certId = (String)attributes.get("certId");

		if (certId != null) {
			setCertId(certId);
		}

		Boolean letter = (Boolean)attributes.get("letter");

		if (letter != null) {
			setLetter(letter);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getCanvasUserId() {
		return _canvasUserId;
	}

	@Override
	public void setCanvasUserId(long canvasUserId) {
		_columnBitmask |= CANVASUSERID_COLUMN_BITMASK;

		if (!_setOriginalCanvasUserId) {
			_setOriginalCanvasUserId = true;

			_originalCanvasUserId = _canvasUserId;
		}

		_canvasUserId = canvasUserId;
	}

	@Override
	public String getCanvasUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getCanvasUserId(), "uuid",
			_canvasUserUuid);
	}

	@Override
	public void setCanvasUserUuid(String canvasUserUuid) {
		_canvasUserUuid = canvasUserUuid;
	}

	public long getOriginalCanvasUserId() {
		return _originalCanvasUserId;
	}

	@JSON
	@Override
	public long getCourseId() {
		return _courseId;
	}

	@Override
	public void setCourseId(long courseId) {
		_columnBitmask |= COURSEID_COLUMN_BITMASK;

		if (!_setOriginalCourseId) {
			_setOriginalCourseId = true;

			_originalCourseId = _courseId;
		}

		_courseId = courseId;
	}

	public long getOriginalCourseId() {
		return _originalCourseId;
	}

	@JSON
	@Override
	public long getExternalId() {
		return _externalId;
	}

	@Override
	public void setExternalId(long externalId) {
		_externalId = externalId;
	}

	@JSON
	@Override
	public String getCertId() {
		if (_certId == null) {
			return StringPool.BLANK;
		}
		else {
			return _certId;
		}
	}

	@Override
	public void setCertId(String certId) {
		_columnBitmask |= CERTID_COLUMN_BITMASK;

		if (_originalCertId == null) {
			_originalCertId = _certId;
		}

		_certId = certId;
	}

	public String getOriginalCertId() {
		return GetterUtil.getString(_originalCertId);
	}

	@JSON
	@Override
	public boolean getLetter() {
		return _letter;
	}

	@Override
	public boolean isLetter() {
		return _letter;
	}

	@Override
	public void setLetter(boolean letter) {
		_columnBitmask |= LETTER_COLUMN_BITMASK;

		if (!_setOriginalLetter) {
			_setOriginalLetter = true;

			_originalLetter = _letter;
		}

		_letter = letter;
	}

	public boolean getOriginalLetter() {
		return _originalLetter;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UserAward.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserAward toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserAward)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserAwardImpl userAwardImpl = new UserAwardImpl();

		userAwardImpl.setId(getId());
		userAwardImpl.setCanvasUserId(getCanvasUserId());
		userAwardImpl.setCourseId(getCourseId());
		userAwardImpl.setExternalId(getExternalId());
		userAwardImpl.setCertId(getCertId());
		userAwardImpl.setLetter(getLetter());
		userAwardImpl.setCreateDate(getCreateDate());

		userAwardImpl.resetOriginalValues();

		return userAwardImpl;
	}

	@Override
	public int compareTo(UserAward userAward) {
		long primaryKey = userAward.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserAward)) {
			return false;
		}

		UserAward userAward = (UserAward)obj;

		long primaryKey = userAward.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UserAwardModelImpl userAwardModelImpl = this;

		userAwardModelImpl._originalCanvasUserId = userAwardModelImpl._canvasUserId;

		userAwardModelImpl._setOriginalCanvasUserId = false;

		userAwardModelImpl._originalCourseId = userAwardModelImpl._courseId;

		userAwardModelImpl._setOriginalCourseId = false;

		userAwardModelImpl._originalCertId = userAwardModelImpl._certId;

		userAwardModelImpl._originalLetter = userAwardModelImpl._letter;

		userAwardModelImpl._setOriginalLetter = false;

		userAwardModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserAward> toCacheModel() {
		UserAwardCacheModel userAwardCacheModel = new UserAwardCacheModel();

		userAwardCacheModel.id = getId();

		userAwardCacheModel.canvasUserId = getCanvasUserId();

		userAwardCacheModel.courseId = getCourseId();

		userAwardCacheModel.externalId = getExternalId();

		userAwardCacheModel.certId = getCertId();

		String certId = userAwardCacheModel.certId;

		if ((certId != null) && (certId.length() == 0)) {
			userAwardCacheModel.certId = null;
		}

		userAwardCacheModel.letter = getLetter();

		Date createDate = getCreateDate();

		if (createDate != null) {
			userAwardCacheModel.createDate = createDate.getTime();
		}
		else {
			userAwardCacheModel.createDate = Long.MIN_VALUE;
		}

		return userAwardCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", canvasUserId=");
		sb.append(getCanvasUserId());
		sb.append(", courseId=");
		sb.append(getCourseId());
		sb.append(", externalId=");
		sb.append(getExternalId());
		sb.append(", certId=");
		sb.append(getCertId());
		sb.append(", letter=");
		sb.append(getLetter());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.instructure.canvas.model.UserAward");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>canvasUserId</column-name><column-value><![CDATA[");
		sb.append(getCanvasUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseId</column-name><column-value><![CDATA[");
		sb.append(getCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>externalId</column-name><column-value><![CDATA[");
		sb.append(getExternalId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certId</column-name><column-value><![CDATA[");
		sb.append(getCertId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>letter</column-name><column-value><![CDATA[");
		sb.append(getLetter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserAward.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UserAward.class
		};
	private long _id;
	private long _canvasUserId;
	private String _canvasUserUuid;
	private long _originalCanvasUserId;
	private boolean _setOriginalCanvasUserId;
	private long _courseId;
	private long _originalCourseId;
	private boolean _setOriginalCourseId;
	private long _externalId;
	private String _certId;
	private String _originalCertId;
	private boolean _letter;
	private boolean _originalLetter;
	private boolean _setOriginalLetter;
	private Date _createDate;
	private long _columnBitmask;
	private UserAward _escapedModel;
}