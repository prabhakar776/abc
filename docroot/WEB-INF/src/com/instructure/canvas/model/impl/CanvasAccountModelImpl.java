/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.instructure.canvas.model.impl;

import com.instructure.canvas.model.CanvasAccount;
import com.instructure.canvas.model.CanvasAccountModel;
import com.instructure.canvas.model.CanvasAccountSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CanvasAccount service. Represents a row in the &quot;CANVAS_CanvasAccount&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.instructure.canvas.model.CanvasAccountModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CanvasAccountImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CanvasAccountImpl
 * @see com.instructure.canvas.model.CanvasAccount
 * @see com.instructure.canvas.model.CanvasAccountModel
 * @generated
 */
@JSON(strict = true)
public class CanvasAccountModelImpl extends BaseModelImpl<CanvasAccount>
	implements CanvasAccountModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a canvas account model instance should use the {@link com.instructure.canvas.model.CanvasAccount} interface instead.
	 */
	public static final String TABLE_NAME = "CANVAS_CanvasAccount";
	public static final Object[][] TABLE_COLUMNS = {
			{ "accountId", Types.BIGINT },
			{ "id_", Types.VARCHAR },
			{ "parentAccountId", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "rootAccountId", Types.VARCHAR },
			{ "SISAccountId", Types.VARCHAR },
			{ "status", Types.BIGINT },
			{ "timeZone", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CANVAS_CanvasAccount (accountId LONG not null primary key,id_ VARCHAR(75) null,parentAccountId VARCHAR(75) null,name VARCHAR(75) null,rootAccountId VARCHAR(75) null,SISAccountId VARCHAR(75) null,status LONG,timeZone VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CANVAS_CanvasAccount";
	public static final String ORDER_BY_JPQL = " ORDER BY canvasAccount.accountId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CANVAS_CanvasAccount.accountId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.instructure.canvas.model.CanvasAccount"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.instructure.canvas.model.CanvasAccount"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CanvasAccount toModel(CanvasAccountSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CanvasAccount model = new CanvasAccountImpl();

		model.setAccountId(soapModel.getAccountId());
		model.setId(soapModel.getId());
		model.setParentAccountId(soapModel.getParentAccountId());
		model.setName(soapModel.getName());
		model.setRootAccountId(soapModel.getRootAccountId());
		model.setSISAccountId(soapModel.getSISAccountId());
		model.setStatus(soapModel.getStatus());
		model.setTimeZone(soapModel.getTimeZone());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CanvasAccount> toModels(CanvasAccountSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CanvasAccount> models = new ArrayList<CanvasAccount>(soapModels.length);

		for (CanvasAccountSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.instructure.canvas.model.CanvasAccount"));

	public CanvasAccountModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accountId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccountId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accountId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CanvasAccount.class;
	}

	@Override
	public String getModelClassName() {
		return CanvasAccount.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("accountId", getAccountId());
		attributes.put("id", getId());
		attributes.put("parentAccountId", getParentAccountId());
		attributes.put("name", getName());
		attributes.put("rootAccountId", getRootAccountId());
		attributes.put("SISAccountId", getSISAccountId());
		attributes.put("status", getStatus());
		attributes.put("timeZone", getTimeZone());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long accountId = (Long)attributes.get("accountId");

		if (accountId != null) {
			setAccountId(accountId);
		}

		String id = (String)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String parentAccountId = (String)attributes.get("parentAccountId");

		if (parentAccountId != null) {
			setParentAccountId(parentAccountId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String rootAccountId = (String)attributes.get("rootAccountId");

		if (rootAccountId != null) {
			setRootAccountId(rootAccountId);
		}

		String SISAccountId = (String)attributes.get("SISAccountId");

		if (SISAccountId != null) {
			setSISAccountId(SISAccountId);
		}

		Long status = (Long)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String timeZone = (String)attributes.get("timeZone");

		if (timeZone != null) {
			setTimeZone(timeZone);
		}
	}

	@JSON
	@Override
	public long getAccountId() {
		return _accountId;
	}

	@Override
	public void setAccountId(long accountId) {
		_accountId = accountId;
	}

	@JSON
	@Override
	public String getId() {
		if (_id == null) {
			return StringPool.BLANK;
		}
		else {
			return _id;
		}
	}

	@Override
	public void setId(String id) {
		_id = id;
	}

	@JSON
	@Override
	public String getParentAccountId() {
		if (_parentAccountId == null) {
			return StringPool.BLANK;
		}
		else {
			return _parentAccountId;
		}
	}

	@Override
	public void setParentAccountId(String parentAccountId) {
		_parentAccountId = parentAccountId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getRootAccountId() {
		if (_rootAccountId == null) {
			return StringPool.BLANK;
		}
		else {
			return _rootAccountId;
		}
	}

	@Override
	public void setRootAccountId(String rootAccountId) {
		_rootAccountId = rootAccountId;
	}

	@JSON
	@Override
	public String getSISAccountId() {
		if (_SISAccountId == null) {
			return StringPool.BLANK;
		}
		else {
			return _SISAccountId;
		}
	}

	@Override
	public void setSISAccountId(String SISAccountId) {
		_SISAccountId = SISAccountId;
	}

	@JSON
	@Override
	public long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(long status) {
		_status = status;
	}

	@JSON
	@Override
	public String getTimeZone() {
		if (_timeZone == null) {
			return StringPool.BLANK;
		}
		else {
			return _timeZone;
		}
	}

	@Override
	public void setTimeZone(String timeZone) {
		_timeZone = timeZone;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CanvasAccount.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CanvasAccount toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CanvasAccount)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CanvasAccountImpl canvasAccountImpl = new CanvasAccountImpl();

		canvasAccountImpl.setAccountId(getAccountId());
		canvasAccountImpl.setId(getId());
		canvasAccountImpl.setParentAccountId(getParentAccountId());
		canvasAccountImpl.setName(getName());
		canvasAccountImpl.setRootAccountId(getRootAccountId());
		canvasAccountImpl.setSISAccountId(getSISAccountId());
		canvasAccountImpl.setStatus(getStatus());
		canvasAccountImpl.setTimeZone(getTimeZone());

		canvasAccountImpl.resetOriginalValues();

		return canvasAccountImpl;
	}

	@Override
	public int compareTo(CanvasAccount canvasAccount) {
		long primaryKey = canvasAccount.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CanvasAccount)) {
			return false;
		}

		CanvasAccount canvasAccount = (CanvasAccount)obj;

		long primaryKey = canvasAccount.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<CanvasAccount> toCacheModel() {
		CanvasAccountCacheModel canvasAccountCacheModel = new CanvasAccountCacheModel();

		canvasAccountCacheModel.accountId = getAccountId();

		canvasAccountCacheModel.id = getId();

		String id = canvasAccountCacheModel.id;

		if ((id != null) && (id.length() == 0)) {
			canvasAccountCacheModel.id = null;
		}

		canvasAccountCacheModel.parentAccountId = getParentAccountId();

		String parentAccountId = canvasAccountCacheModel.parentAccountId;

		if ((parentAccountId != null) && (parentAccountId.length() == 0)) {
			canvasAccountCacheModel.parentAccountId = null;
		}

		canvasAccountCacheModel.name = getName();

		String name = canvasAccountCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			canvasAccountCacheModel.name = null;
		}

		canvasAccountCacheModel.rootAccountId = getRootAccountId();

		String rootAccountId = canvasAccountCacheModel.rootAccountId;

		if ((rootAccountId != null) && (rootAccountId.length() == 0)) {
			canvasAccountCacheModel.rootAccountId = null;
		}

		canvasAccountCacheModel.SISAccountId = getSISAccountId();

		String SISAccountId = canvasAccountCacheModel.SISAccountId;

		if ((SISAccountId != null) && (SISAccountId.length() == 0)) {
			canvasAccountCacheModel.SISAccountId = null;
		}

		canvasAccountCacheModel.status = getStatus();

		canvasAccountCacheModel.timeZone = getTimeZone();

		String timeZone = canvasAccountCacheModel.timeZone;

		if ((timeZone != null) && (timeZone.length() == 0)) {
			canvasAccountCacheModel.timeZone = null;
		}

		return canvasAccountCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{accountId=");
		sb.append(getAccountId());
		sb.append(", id=");
		sb.append(getId());
		sb.append(", parentAccountId=");
		sb.append(getParentAccountId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", rootAccountId=");
		sb.append(getRootAccountId());
		sb.append(", SISAccountId=");
		sb.append(getSISAccountId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", timeZone=");
		sb.append(getTimeZone());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.instructure.canvas.model.CanvasAccount");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>accountId</column-name><column-value><![CDATA[");
		sb.append(getAccountId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentAccountId</column-name><column-value><![CDATA[");
		sb.append(getParentAccountId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rootAccountId</column-name><column-value><![CDATA[");
		sb.append(getRootAccountId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SISAccountId</column-name><column-value><![CDATA[");
		sb.append(getSISAccountId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeZone</column-name><column-value><![CDATA[");
		sb.append(getTimeZone());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CanvasAccount.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CanvasAccount.class
		};
	private long _accountId;
	private String _id;
	private String _parentAccountId;
	private String _name;
	private String _rootAccountId;
	private String _SISAccountId;
	private long _status;
	private String _timeZone;
	private CanvasAccount _escapedModel;
}