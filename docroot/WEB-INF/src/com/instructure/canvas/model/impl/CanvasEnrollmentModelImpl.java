/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.instructure.canvas.model.impl;

import com.instructure.canvas.model.CanvasEnrollment;
import com.instructure.canvas.model.CanvasEnrollmentModel;
import com.instructure.canvas.model.CanvasEnrollmentSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CanvasEnrollment service. Represents a row in the &quot;CANVAS_CanvasEnrollment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.instructure.canvas.model.CanvasEnrollmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CanvasEnrollmentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CanvasEnrollmentImpl
 * @see com.instructure.canvas.model.CanvasEnrollment
 * @see com.instructure.canvas.model.CanvasEnrollmentModel
 * @generated
 */
@JSON(strict = true)
public class CanvasEnrollmentModelImpl extends BaseModelImpl<CanvasEnrollment>
	implements CanvasEnrollmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a canvas enrollment model instance should use the {@link com.instructure.canvas.model.CanvasEnrollment} interface instead.
	 */
	public static final String TABLE_NAME = "CANVAS_CanvasEnrollment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "courseId", Types.BIGINT },
			{ "userId", Types.VARCHAR },
			{ "role", Types.VARCHAR },
			{ "sectionId", Types.VARCHAR },
			{ "status", Types.VARCHAR },
			{ "associatedUserId", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CANVAS_CanvasEnrollment (courseId LONG not null primary key,userId VARCHAR(75) null,role VARCHAR(75) null,sectionId VARCHAR(75) null,status VARCHAR(75) null,associatedUserId VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CANVAS_CanvasEnrollment";
	public static final String ORDER_BY_JPQL = " ORDER BY canvasEnrollment.courseId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CANVAS_CanvasEnrollment.courseId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.instructure.canvas.model.CanvasEnrollment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.instructure.canvas.model.CanvasEnrollment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CanvasEnrollment toModel(CanvasEnrollmentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CanvasEnrollment model = new CanvasEnrollmentImpl();

		model.setCourseId(soapModel.getCourseId());
		model.setUserId(soapModel.getUserId());
		model.setRole(soapModel.getRole());
		model.setSectionId(soapModel.getSectionId());
		model.setStatus(soapModel.getStatus());
		model.setAssociatedUserId(soapModel.getAssociatedUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CanvasEnrollment> toModels(
		CanvasEnrollmentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CanvasEnrollment> models = new ArrayList<CanvasEnrollment>(soapModels.length);

		for (CanvasEnrollmentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.instructure.canvas.model.CanvasEnrollment"));

	public CanvasEnrollmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _courseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCourseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _courseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CanvasEnrollment.class;
	}

	@Override
	public String getModelClassName() {
		return CanvasEnrollment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("courseId", getCourseId());
		attributes.put("userId", getUserId());
		attributes.put("role", getRole());
		attributes.put("sectionId", getSectionId());
		attributes.put("status", getStatus());
		attributes.put("associatedUserId", getAssociatedUserId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long courseId = (Long)attributes.get("courseId");

		if (courseId != null) {
			setCourseId(courseId);
		}

		String userId = (String)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String role = (String)attributes.get("role");

		if (role != null) {
			setRole(role);
		}

		String sectionId = (String)attributes.get("sectionId");

		if (sectionId != null) {
			setSectionId(sectionId);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String associatedUserId = (String)attributes.get("associatedUserId");

		if (associatedUserId != null) {
			setAssociatedUserId(associatedUserId);
		}
	}

	@JSON
	@Override
	public long getCourseId() {
		return _courseId;
	}

	@Override
	public void setCourseId(long courseId) {
		_courseId = courseId;
	}

	@JSON
	@Override
	public String getUserId() {
		if (_userId == null) {
			return StringPool.BLANK;
		}
		else {
			return _userId;
		}
	}

	@Override
	public void setUserId(String userId) {
		_userId = userId;
	}

	@JSON
	@Override
	public String getRole() {
		if (_role == null) {
			return StringPool.BLANK;
		}
		else {
			return _role;
		}
	}

	@Override
	public void setRole(String role) {
		_role = role;
	}

	@JSON
	@Override
	public String getSectionId() {
		if (_sectionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _sectionId;
		}
	}

	@Override
	public void setSectionId(String sectionId) {
		_sectionId = sectionId;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@JSON
	@Override
	public String getAssociatedUserId() {
		if (_associatedUserId == null) {
			return StringPool.BLANK;
		}
		else {
			return _associatedUserId;
		}
	}

	@Override
	public void setAssociatedUserId(String associatedUserId) {
		_associatedUserId = associatedUserId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CanvasEnrollment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CanvasEnrollment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CanvasEnrollment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CanvasEnrollmentImpl canvasEnrollmentImpl = new CanvasEnrollmentImpl();

		canvasEnrollmentImpl.setCourseId(getCourseId());
		canvasEnrollmentImpl.setUserId(getUserId());
		canvasEnrollmentImpl.setRole(getRole());
		canvasEnrollmentImpl.setSectionId(getSectionId());
		canvasEnrollmentImpl.setStatus(getStatus());
		canvasEnrollmentImpl.setAssociatedUserId(getAssociatedUserId());

		canvasEnrollmentImpl.resetOriginalValues();

		return canvasEnrollmentImpl;
	}

	@Override
	public int compareTo(CanvasEnrollment canvasEnrollment) {
		long primaryKey = canvasEnrollment.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CanvasEnrollment)) {
			return false;
		}

		CanvasEnrollment canvasEnrollment = (CanvasEnrollment)obj;

		long primaryKey = canvasEnrollment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<CanvasEnrollment> toCacheModel() {
		CanvasEnrollmentCacheModel canvasEnrollmentCacheModel = new CanvasEnrollmentCacheModel();

		canvasEnrollmentCacheModel.courseId = getCourseId();

		canvasEnrollmentCacheModel.userId = getUserId();

		String userId = canvasEnrollmentCacheModel.userId;

		if ((userId != null) && (userId.length() == 0)) {
			canvasEnrollmentCacheModel.userId = null;
		}

		canvasEnrollmentCacheModel.role = getRole();

		String role = canvasEnrollmentCacheModel.role;

		if ((role != null) && (role.length() == 0)) {
			canvasEnrollmentCacheModel.role = null;
		}

		canvasEnrollmentCacheModel.sectionId = getSectionId();

		String sectionId = canvasEnrollmentCacheModel.sectionId;

		if ((sectionId != null) && (sectionId.length() == 0)) {
			canvasEnrollmentCacheModel.sectionId = null;
		}

		canvasEnrollmentCacheModel.status = getStatus();

		String status = canvasEnrollmentCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			canvasEnrollmentCacheModel.status = null;
		}

		canvasEnrollmentCacheModel.associatedUserId = getAssociatedUserId();

		String associatedUserId = canvasEnrollmentCacheModel.associatedUserId;

		if ((associatedUserId != null) && (associatedUserId.length() == 0)) {
			canvasEnrollmentCacheModel.associatedUserId = null;
		}

		return canvasEnrollmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{courseId=");
		sb.append(getCourseId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", role=");
		sb.append(getRole());
		sb.append(", sectionId=");
		sb.append(getSectionId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", associatedUserId=");
		sb.append(getAssociatedUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.instructure.canvas.model.CanvasEnrollment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>courseId</column-name><column-value><![CDATA[");
		sb.append(getCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>role</column-name><column-value><![CDATA[");
		sb.append(getRole());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sectionId</column-name><column-value><![CDATA[");
		sb.append(getSectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>associatedUserId</column-name><column-value><![CDATA[");
		sb.append(getAssociatedUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CanvasEnrollment.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CanvasEnrollment.class
		};
	private long _courseId;
	private String _userId;
	private String _role;
	private String _sectionId;
	private String _status;
	private String _associatedUserId;
	private CanvasEnrollment _escapedModel;
}