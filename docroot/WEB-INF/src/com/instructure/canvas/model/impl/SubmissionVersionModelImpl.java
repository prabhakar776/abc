/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.instructure.canvas.model.impl;

import com.instructure.canvas.model.SubmissionVersion;
import com.instructure.canvas.model.SubmissionVersionModel;
import com.instructure.canvas.model.SubmissionVersionSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SubmissionVersion service. Represents a row in the &quot;CANVAS_SubmissionVersion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.instructure.canvas.model.SubmissionVersionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SubmissionVersionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SubmissionVersionImpl
 * @see com.instructure.canvas.model.SubmissionVersion
 * @see com.instructure.canvas.model.SubmissionVersionModel
 * @generated
 */
@JSON(strict = true)
public class SubmissionVersionModelImpl extends BaseModelImpl<SubmissionVersion>
	implements SubmissionVersionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a submission version model instance should use the {@link com.instructure.canvas.model.SubmissionVersion} interface instead.
	 */
	public static final String TABLE_NAME = "CANVAS_SubmissionVersion";
	public static final Object[][] TABLE_COLUMNS = {
			{ "submissionId", Types.BIGINT },
			{ "assignmentId", Types.BIGINT },
			{ "assignmentName", Types.VARCHAR },
			{ "attempt", Types.INTEGER },
			{ "body", Types.VARCHAR },
			{ "currentGrade", Types.VARCHAR },
			{ "currentGradedAt", Types.VARCHAR },
			{ "currentGrader", Types.VARCHAR },
			{ "gradeMatchesCurrentSubmission", Types.VARCHAR },
			{ "gradedAt", Types.VARCHAR },
			{ "grader", Types.VARCHAR },
			{ "graderId", Types.BIGINT },
			{ "newGrade", Types.VARCHAR },
			{ "newGradedAt", Types.VARCHAR },
			{ "newGrader", Types.VARCHAR },
			{ "previousGrade", Types.VARCHAR },
			{ "previousGradedAt", Types.VARCHAR },
			{ "previousGrader", Types.VARCHAR },
			{ "score", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "submissionType", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "workflowState", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CANVAS_SubmissionVersion (submissionId LONG not null primary key,assignmentId LONG,assignmentName VARCHAR(75) null,attempt INTEGER,body VARCHAR(75) null,currentGrade VARCHAR(75) null,currentGradedAt VARCHAR(75) null,currentGrader VARCHAR(75) null,gradeMatchesCurrentSubmission VARCHAR(75) null,gradedAt VARCHAR(75) null,grader VARCHAR(75) null,graderId LONG,newGrade VARCHAR(75) null,newGradedAt VARCHAR(75) null,newGrader VARCHAR(75) null,previousGrade VARCHAR(75) null,previousGradedAt VARCHAR(75) null,previousGrader VARCHAR(75) null,score LONG,userName VARCHAR(75) null,userId LONG,submissionType VARCHAR(75) null,url VARCHAR(75) null,workflowState VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CANVAS_SubmissionVersion";
	public static final String ORDER_BY_JPQL = " ORDER BY submissionVersion.submissionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CANVAS_SubmissionVersion.submissionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.instructure.canvas.model.SubmissionVersion"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.instructure.canvas.model.SubmissionVersion"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SubmissionVersion toModel(SubmissionVersionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SubmissionVersion model = new SubmissionVersionImpl();

		model.setSubmissionId(soapModel.getSubmissionId());
		model.setAssignmentId(soapModel.getAssignmentId());
		model.setAssignmentName(soapModel.getAssignmentName());
		model.setAttempt(soapModel.getAttempt());
		model.setBody(soapModel.getBody());
		model.setCurrentGrade(soapModel.getCurrentGrade());
		model.setCurrentGradedAt(soapModel.getCurrentGradedAt());
		model.setCurrentGrader(soapModel.getCurrentGrader());
		model.setGradeMatchesCurrentSubmission(soapModel.getGradeMatchesCurrentSubmission());
		model.setGradedAt(soapModel.getGradedAt());
		model.setGrader(soapModel.getGrader());
		model.setGraderId(soapModel.getGraderId());
		model.setNewGrade(soapModel.getNewGrade());
		model.setNewGradedAt(soapModel.getNewGradedAt());
		model.setNewGrader(soapModel.getNewGrader());
		model.setPreviousGrade(soapModel.getPreviousGrade());
		model.setPreviousGradedAt(soapModel.getPreviousGradedAt());
		model.setPreviousGrader(soapModel.getPreviousGrader());
		model.setScore(soapModel.getScore());
		model.setUserName(soapModel.getUserName());
		model.setUserId(soapModel.getUserId());
		model.setSubmissionType(soapModel.getSubmissionType());
		model.setUrl(soapModel.getUrl());
		model.setWorkflowState(soapModel.getWorkflowState());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SubmissionVersion> toModels(
		SubmissionVersionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SubmissionVersion> models = new ArrayList<SubmissionVersion>(soapModels.length);

		for (SubmissionVersionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.instructure.canvas.model.SubmissionVersion"));

	public SubmissionVersionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _submissionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSubmissionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _submissionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SubmissionVersion.class;
	}

	@Override
	public String getModelClassName() {
		return SubmissionVersion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("submissionId", getSubmissionId());
		attributes.put("assignmentId", getAssignmentId());
		attributes.put("assignmentName", getAssignmentName());
		attributes.put("attempt", getAttempt());
		attributes.put("body", getBody());
		attributes.put("currentGrade", getCurrentGrade());
		attributes.put("currentGradedAt", getCurrentGradedAt());
		attributes.put("currentGrader", getCurrentGrader());
		attributes.put("gradeMatchesCurrentSubmission",
			getGradeMatchesCurrentSubmission());
		attributes.put("gradedAt", getGradedAt());
		attributes.put("grader", getGrader());
		attributes.put("graderId", getGraderId());
		attributes.put("newGrade", getNewGrade());
		attributes.put("newGradedAt", getNewGradedAt());
		attributes.put("newGrader", getNewGrader());
		attributes.put("previousGrade", getPreviousGrade());
		attributes.put("previousGradedAt", getPreviousGradedAt());
		attributes.put("previousGrader", getPreviousGrader());
		attributes.put("score", getScore());
		attributes.put("userName", getUserName());
		attributes.put("userId", getUserId());
		attributes.put("submissionType", getSubmissionType());
		attributes.put("url", getUrl());
		attributes.put("workflowState", getWorkflowState());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long submissionId = (Long)attributes.get("submissionId");

		if (submissionId != null) {
			setSubmissionId(submissionId);
		}

		Long assignmentId = (Long)attributes.get("assignmentId");

		if (assignmentId != null) {
			setAssignmentId(assignmentId);
		}

		String assignmentName = (String)attributes.get("assignmentName");

		if (assignmentName != null) {
			setAssignmentName(assignmentName);
		}

		Integer attempt = (Integer)attributes.get("attempt");

		if (attempt != null) {
			setAttempt(attempt);
		}

		String body = (String)attributes.get("body");

		if (body != null) {
			setBody(body);
		}

		String currentGrade = (String)attributes.get("currentGrade");

		if (currentGrade != null) {
			setCurrentGrade(currentGrade);
		}

		String currentGradedAt = (String)attributes.get("currentGradedAt");

		if (currentGradedAt != null) {
			setCurrentGradedAt(currentGradedAt);
		}

		String currentGrader = (String)attributes.get("currentGrader");

		if (currentGrader != null) {
			setCurrentGrader(currentGrader);
		}

		String gradeMatchesCurrentSubmission = (String)attributes.get(
				"gradeMatchesCurrentSubmission");

		if (gradeMatchesCurrentSubmission != null) {
			setGradeMatchesCurrentSubmission(gradeMatchesCurrentSubmission);
		}

		String gradedAt = (String)attributes.get("gradedAt");

		if (gradedAt != null) {
			setGradedAt(gradedAt);
		}

		String grader = (String)attributes.get("grader");

		if (grader != null) {
			setGrader(grader);
		}

		Long graderId = (Long)attributes.get("graderId");

		if (graderId != null) {
			setGraderId(graderId);
		}

		String newGrade = (String)attributes.get("newGrade");

		if (newGrade != null) {
			setNewGrade(newGrade);
		}

		String newGradedAt = (String)attributes.get("newGradedAt");

		if (newGradedAt != null) {
			setNewGradedAt(newGradedAt);
		}

		String newGrader = (String)attributes.get("newGrader");

		if (newGrader != null) {
			setNewGrader(newGrader);
		}

		String previousGrade = (String)attributes.get("previousGrade");

		if (previousGrade != null) {
			setPreviousGrade(previousGrade);
		}

		String previousGradedAt = (String)attributes.get("previousGradedAt");

		if (previousGradedAt != null) {
			setPreviousGradedAt(previousGradedAt);
		}

		String previousGrader = (String)attributes.get("previousGrader");

		if (previousGrader != null) {
			setPreviousGrader(previousGrader);
		}

		Long score = (Long)attributes.get("score");

		if (score != null) {
			setScore(score);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String submissionType = (String)attributes.get("submissionType");

		if (submissionType != null) {
			setSubmissionType(submissionType);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String workflowState = (String)attributes.get("workflowState");

		if (workflowState != null) {
			setWorkflowState(workflowState);
		}
	}

	@JSON
	@Override
	public long getSubmissionId() {
		return _submissionId;
	}

	@Override
	public void setSubmissionId(long submissionId) {
		_submissionId = submissionId;
	}

	@JSON
	@Override
	public long getAssignmentId() {
		return _assignmentId;
	}

	@Override
	public void setAssignmentId(long assignmentId) {
		_assignmentId = assignmentId;
	}

	@JSON
	@Override
	public String getAssignmentName() {
		if (_assignmentName == null) {
			return StringPool.BLANK;
		}
		else {
			return _assignmentName;
		}
	}

	@Override
	public void setAssignmentName(String assignmentName) {
		_assignmentName = assignmentName;
	}

	@JSON
	@Override
	public int getAttempt() {
		return _attempt;
	}

	@Override
	public void setAttempt(int attempt) {
		_attempt = attempt;
	}

	@JSON
	@Override
	public String getBody() {
		if (_body == null) {
			return StringPool.BLANK;
		}
		else {
			return _body;
		}
	}

	@Override
	public void setBody(String body) {
		_body = body;
	}

	@JSON
	@Override
	public String getCurrentGrade() {
		if (_currentGrade == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentGrade;
		}
	}

	@Override
	public void setCurrentGrade(String currentGrade) {
		_currentGrade = currentGrade;
	}

	@JSON
	@Override
	public String getCurrentGradedAt() {
		if (_currentGradedAt == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentGradedAt;
		}
	}

	@Override
	public void setCurrentGradedAt(String currentGradedAt) {
		_currentGradedAt = currentGradedAt;
	}

	@JSON
	@Override
	public String getCurrentGrader() {
		if (_currentGrader == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentGrader;
		}
	}

	@Override
	public void setCurrentGrader(String currentGrader) {
		_currentGrader = currentGrader;
	}

	@JSON
	@Override
	public String getGradeMatchesCurrentSubmission() {
		if (_gradeMatchesCurrentSubmission == null) {
			return StringPool.BLANK;
		}
		else {
			return _gradeMatchesCurrentSubmission;
		}
	}

	@Override
	public void setGradeMatchesCurrentSubmission(
		String gradeMatchesCurrentSubmission) {
		_gradeMatchesCurrentSubmission = gradeMatchesCurrentSubmission;
	}

	@JSON
	@Override
	public String getGradedAt() {
		if (_gradedAt == null) {
			return StringPool.BLANK;
		}
		else {
			return _gradedAt;
		}
	}

	@Override
	public void setGradedAt(String gradedAt) {
		_gradedAt = gradedAt;
	}

	@JSON
	@Override
	public String getGrader() {
		if (_grader == null) {
			return StringPool.BLANK;
		}
		else {
			return _grader;
		}
	}

	@Override
	public void setGrader(String grader) {
		_grader = grader;
	}

	@JSON
	@Override
	public long getGraderId() {
		return _graderId;
	}

	@Override
	public void setGraderId(long graderId) {
		_graderId = graderId;
	}

	@JSON
	@Override
	public String getNewGrade() {
		if (_newGrade == null) {
			return StringPool.BLANK;
		}
		else {
			return _newGrade;
		}
	}

	@Override
	public void setNewGrade(String newGrade) {
		_newGrade = newGrade;
	}

	@JSON
	@Override
	public String getNewGradedAt() {
		if (_newGradedAt == null) {
			return StringPool.BLANK;
		}
		else {
			return _newGradedAt;
		}
	}

	@Override
	public void setNewGradedAt(String newGradedAt) {
		_newGradedAt = newGradedAt;
	}

	@JSON
	@Override
	public String getNewGrader() {
		if (_newGrader == null) {
			return StringPool.BLANK;
		}
		else {
			return _newGrader;
		}
	}

	@Override
	public void setNewGrader(String newGrader) {
		_newGrader = newGrader;
	}

	@JSON
	@Override
	public String getPreviousGrade() {
		if (_previousGrade == null) {
			return StringPool.BLANK;
		}
		else {
			return _previousGrade;
		}
	}

	@Override
	public void setPreviousGrade(String previousGrade) {
		_previousGrade = previousGrade;
	}

	@JSON
	@Override
	public String getPreviousGradedAt() {
		if (_previousGradedAt == null) {
			return StringPool.BLANK;
		}
		else {
			return _previousGradedAt;
		}
	}

	@Override
	public void setPreviousGradedAt(String previousGradedAt) {
		_previousGradedAt = previousGradedAt;
	}

	@JSON
	@Override
	public String getPreviousGrader() {
		if (_previousGrader == null) {
			return StringPool.BLANK;
		}
		else {
			return _previousGrader;
		}
	}

	@Override
	public void setPreviousGrader(String previousGrader) {
		_previousGrader = previousGrader;
	}

	@JSON
	@Override
	public long getScore() {
		return _score;
	}

	@Override
	public void setScore(long score) {
		_score = score;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getSubmissionType() {
		if (_submissionType == null) {
			return StringPool.BLANK;
		}
		else {
			return _submissionType;
		}
	}

	@Override
	public void setSubmissionType(String submissionType) {
		_submissionType = submissionType;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@JSON
	@Override
	public String getWorkflowState() {
		if (_workflowState == null) {
			return StringPool.BLANK;
		}
		else {
			return _workflowState;
		}
	}

	@Override
	public void setWorkflowState(String workflowState) {
		_workflowState = workflowState;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SubmissionVersion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SubmissionVersion toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SubmissionVersion)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SubmissionVersionImpl submissionVersionImpl = new SubmissionVersionImpl();

		submissionVersionImpl.setSubmissionId(getSubmissionId());
		submissionVersionImpl.setAssignmentId(getAssignmentId());
		submissionVersionImpl.setAssignmentName(getAssignmentName());
		submissionVersionImpl.setAttempt(getAttempt());
		submissionVersionImpl.setBody(getBody());
		submissionVersionImpl.setCurrentGrade(getCurrentGrade());
		submissionVersionImpl.setCurrentGradedAt(getCurrentGradedAt());
		submissionVersionImpl.setCurrentGrader(getCurrentGrader());
		submissionVersionImpl.setGradeMatchesCurrentSubmission(getGradeMatchesCurrentSubmission());
		submissionVersionImpl.setGradedAt(getGradedAt());
		submissionVersionImpl.setGrader(getGrader());
		submissionVersionImpl.setGraderId(getGraderId());
		submissionVersionImpl.setNewGrade(getNewGrade());
		submissionVersionImpl.setNewGradedAt(getNewGradedAt());
		submissionVersionImpl.setNewGrader(getNewGrader());
		submissionVersionImpl.setPreviousGrade(getPreviousGrade());
		submissionVersionImpl.setPreviousGradedAt(getPreviousGradedAt());
		submissionVersionImpl.setPreviousGrader(getPreviousGrader());
		submissionVersionImpl.setScore(getScore());
		submissionVersionImpl.setUserName(getUserName());
		submissionVersionImpl.setUserId(getUserId());
		submissionVersionImpl.setSubmissionType(getSubmissionType());
		submissionVersionImpl.setUrl(getUrl());
		submissionVersionImpl.setWorkflowState(getWorkflowState());

		submissionVersionImpl.resetOriginalValues();

		return submissionVersionImpl;
	}

	@Override
	public int compareTo(SubmissionVersion submissionVersion) {
		long primaryKey = submissionVersion.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SubmissionVersion)) {
			return false;
		}

		SubmissionVersion submissionVersion = (SubmissionVersion)obj;

		long primaryKey = submissionVersion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<SubmissionVersion> toCacheModel() {
		SubmissionVersionCacheModel submissionVersionCacheModel = new SubmissionVersionCacheModel();

		submissionVersionCacheModel.submissionId = getSubmissionId();

		submissionVersionCacheModel.assignmentId = getAssignmentId();

		submissionVersionCacheModel.assignmentName = getAssignmentName();

		String assignmentName = submissionVersionCacheModel.assignmentName;

		if ((assignmentName != null) && (assignmentName.length() == 0)) {
			submissionVersionCacheModel.assignmentName = null;
		}

		submissionVersionCacheModel.attempt = getAttempt();

		submissionVersionCacheModel.body = getBody();

		String body = submissionVersionCacheModel.body;

		if ((body != null) && (body.length() == 0)) {
			submissionVersionCacheModel.body = null;
		}

		submissionVersionCacheModel.currentGrade = getCurrentGrade();

		String currentGrade = submissionVersionCacheModel.currentGrade;

		if ((currentGrade != null) && (currentGrade.length() == 0)) {
			submissionVersionCacheModel.currentGrade = null;
		}

		submissionVersionCacheModel.currentGradedAt = getCurrentGradedAt();

		String currentGradedAt = submissionVersionCacheModel.currentGradedAt;

		if ((currentGradedAt != null) && (currentGradedAt.length() == 0)) {
			submissionVersionCacheModel.currentGradedAt = null;
		}

		submissionVersionCacheModel.currentGrader = getCurrentGrader();

		String currentGrader = submissionVersionCacheModel.currentGrader;

		if ((currentGrader != null) && (currentGrader.length() == 0)) {
			submissionVersionCacheModel.currentGrader = null;
		}

		submissionVersionCacheModel.gradeMatchesCurrentSubmission = getGradeMatchesCurrentSubmission();

		String gradeMatchesCurrentSubmission = submissionVersionCacheModel.gradeMatchesCurrentSubmission;

		if ((gradeMatchesCurrentSubmission != null) &&
				(gradeMatchesCurrentSubmission.length() == 0)) {
			submissionVersionCacheModel.gradeMatchesCurrentSubmission = null;
		}

		submissionVersionCacheModel.gradedAt = getGradedAt();

		String gradedAt = submissionVersionCacheModel.gradedAt;

		if ((gradedAt != null) && (gradedAt.length() == 0)) {
			submissionVersionCacheModel.gradedAt = null;
		}

		submissionVersionCacheModel.grader = getGrader();

		String grader = submissionVersionCacheModel.grader;

		if ((grader != null) && (grader.length() == 0)) {
			submissionVersionCacheModel.grader = null;
		}

		submissionVersionCacheModel.graderId = getGraderId();

		submissionVersionCacheModel.newGrade = getNewGrade();

		String newGrade = submissionVersionCacheModel.newGrade;

		if ((newGrade != null) && (newGrade.length() == 0)) {
			submissionVersionCacheModel.newGrade = null;
		}

		submissionVersionCacheModel.newGradedAt = getNewGradedAt();

		String newGradedAt = submissionVersionCacheModel.newGradedAt;

		if ((newGradedAt != null) && (newGradedAt.length() == 0)) {
			submissionVersionCacheModel.newGradedAt = null;
		}

		submissionVersionCacheModel.newGrader = getNewGrader();

		String newGrader = submissionVersionCacheModel.newGrader;

		if ((newGrader != null) && (newGrader.length() == 0)) {
			submissionVersionCacheModel.newGrader = null;
		}

		submissionVersionCacheModel.previousGrade = getPreviousGrade();

		String previousGrade = submissionVersionCacheModel.previousGrade;

		if ((previousGrade != null) && (previousGrade.length() == 0)) {
			submissionVersionCacheModel.previousGrade = null;
		}

		submissionVersionCacheModel.previousGradedAt = getPreviousGradedAt();

		String previousGradedAt = submissionVersionCacheModel.previousGradedAt;

		if ((previousGradedAt != null) && (previousGradedAt.length() == 0)) {
			submissionVersionCacheModel.previousGradedAt = null;
		}

		submissionVersionCacheModel.previousGrader = getPreviousGrader();

		String previousGrader = submissionVersionCacheModel.previousGrader;

		if ((previousGrader != null) && (previousGrader.length() == 0)) {
			submissionVersionCacheModel.previousGrader = null;
		}

		submissionVersionCacheModel.score = getScore();

		submissionVersionCacheModel.userName = getUserName();

		String userName = submissionVersionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			submissionVersionCacheModel.userName = null;
		}

		submissionVersionCacheModel.userId = getUserId();

		submissionVersionCacheModel.submissionType = getSubmissionType();

		String submissionType = submissionVersionCacheModel.submissionType;

		if ((submissionType != null) && (submissionType.length() == 0)) {
			submissionVersionCacheModel.submissionType = null;
		}

		submissionVersionCacheModel.url = getUrl();

		String url = submissionVersionCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			submissionVersionCacheModel.url = null;
		}

		submissionVersionCacheModel.workflowState = getWorkflowState();

		String workflowState = submissionVersionCacheModel.workflowState;

		if ((workflowState != null) && (workflowState.length() == 0)) {
			submissionVersionCacheModel.workflowState = null;
		}

		return submissionVersionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{submissionId=");
		sb.append(getSubmissionId());
		sb.append(", assignmentId=");
		sb.append(getAssignmentId());
		sb.append(", assignmentName=");
		sb.append(getAssignmentName());
		sb.append(", attempt=");
		sb.append(getAttempt());
		sb.append(", body=");
		sb.append(getBody());
		sb.append(", currentGrade=");
		sb.append(getCurrentGrade());
		sb.append(", currentGradedAt=");
		sb.append(getCurrentGradedAt());
		sb.append(", currentGrader=");
		sb.append(getCurrentGrader());
		sb.append(", gradeMatchesCurrentSubmission=");
		sb.append(getGradeMatchesCurrentSubmission());
		sb.append(", gradedAt=");
		sb.append(getGradedAt());
		sb.append(", grader=");
		sb.append(getGrader());
		sb.append(", graderId=");
		sb.append(getGraderId());
		sb.append(", newGrade=");
		sb.append(getNewGrade());
		sb.append(", newGradedAt=");
		sb.append(getNewGradedAt());
		sb.append(", newGrader=");
		sb.append(getNewGrader());
		sb.append(", previousGrade=");
		sb.append(getPreviousGrade());
		sb.append(", previousGradedAt=");
		sb.append(getPreviousGradedAt());
		sb.append(", previousGrader=");
		sb.append(getPreviousGrader());
		sb.append(", score=");
		sb.append(getScore());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", submissionType=");
		sb.append(getSubmissionType());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", workflowState=");
		sb.append(getWorkflowState());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("com.instructure.canvas.model.SubmissionVersion");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>submissionId</column-name><column-value><![CDATA[");
		sb.append(getSubmissionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assignmentId</column-name><column-value><![CDATA[");
		sb.append(getAssignmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assignmentName</column-name><column-value><![CDATA[");
		sb.append(getAssignmentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attempt</column-name><column-value><![CDATA[");
		sb.append(getAttempt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>body</column-name><column-value><![CDATA[");
		sb.append(getBody());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentGrade</column-name><column-value><![CDATA[");
		sb.append(getCurrentGrade());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentGradedAt</column-name><column-value><![CDATA[");
		sb.append(getCurrentGradedAt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentGrader</column-name><column-value><![CDATA[");
		sb.append(getCurrentGrader());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gradeMatchesCurrentSubmission</column-name><column-value><![CDATA[");
		sb.append(getGradeMatchesCurrentSubmission());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gradedAt</column-name><column-value><![CDATA[");
		sb.append(getGradedAt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grader</column-name><column-value><![CDATA[");
		sb.append(getGrader());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>graderId</column-name><column-value><![CDATA[");
		sb.append(getGraderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newGrade</column-name><column-value><![CDATA[");
		sb.append(getNewGrade());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newGradedAt</column-name><column-value><![CDATA[");
		sb.append(getNewGradedAt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>newGrader</column-name><column-value><![CDATA[");
		sb.append(getNewGrader());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>previousGrade</column-name><column-value><![CDATA[");
		sb.append(getPreviousGrade());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>previousGradedAt</column-name><column-value><![CDATA[");
		sb.append(getPreviousGradedAt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>previousGrader</column-name><column-value><![CDATA[");
		sb.append(getPreviousGrader());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>score</column-name><column-value><![CDATA[");
		sb.append(getScore());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submissionType</column-name><column-value><![CDATA[");
		sb.append(getSubmissionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workflowState</column-name><column-value><![CDATA[");
		sb.append(getWorkflowState());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SubmissionVersion.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SubmissionVersion.class
		};
	private long _submissionId;
	private long _assignmentId;
	private String _assignmentName;
	private int _attempt;
	private String _body;
	private String _currentGrade;
	private String _currentGradedAt;
	private String _currentGrader;
	private String _gradeMatchesCurrentSubmission;
	private String _gradedAt;
	private String _grader;
	private long _graderId;
	private String _newGrade;
	private String _newGradedAt;
	private String _newGrader;
	private String _previousGrade;
	private String _previousGradedAt;
	private String _previousGrader;
	private long _score;
	private String _userName;
	private long _userId;
	private String _userUuid;
	private String _submissionType;
	private String _url;
	private String _workflowState;
	private SubmissionVersion _escapedModel;
}