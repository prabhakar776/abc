/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.instructure.canvas.model.impl;

import com.instructure.canvas.model.CertLetterQueue;
import com.instructure.canvas.model.CertLetterQueueModel;
import com.instructure.canvas.model.CertLetterQueueSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CertLetterQueue service. Represents a row in the &quot;CANVAS_CertLetterQueue&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.instructure.canvas.model.CertLetterQueueModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CertLetterQueueImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CertLetterQueueImpl
 * @see com.instructure.canvas.model.CertLetterQueue
 * @see com.instructure.canvas.model.CertLetterQueueModel
 * @generated
 */
@JSON(strict = true)
public class CertLetterQueueModelImpl extends BaseModelImpl<CertLetterQueue>
	implements CertLetterQueueModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cert letter queue model instance should use the {@link com.instructure.canvas.model.CertLetterQueue} interface instead.
	 */
	public static final String TABLE_NAME = "CANVAS_CertLetterQueue";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "courseId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "createdBy", Types.BIGINT },
			{ "status", Types.VARCHAR },
			{ "errorDescription", Types.VARCHAR },
			{ "errorCount", Types.INTEGER },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "startTime", Types.TIMESTAMP },
			{ "endTime", Types.TIMESTAMP },
			{ "zipFileLocation", Types.VARCHAR },
			{ "expiryDate", Types.TIMESTAMP },
			{ "type_", Types.VARCHAR },
			{ "downloadDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table CANVAS_CertLetterQueue (id_ LONG not null primary key,courseId LONG,createDate DATE null,createdBy LONG,status VARCHAR(75) null,errorDescription VARCHAR(75) null,errorCount INTEGER,modifiedDate DATE null,startTime DATE null,endTime DATE null,zipFileLocation VARCHAR(75) null,expiryDate DATE null,type_ VARCHAR(75) null,downloadDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table CANVAS_CertLetterQueue";
	public static final String ORDER_BY_JPQL = " ORDER BY certLetterQueue.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CANVAS_CertLetterQueue.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.instructure.canvas.model.CertLetterQueue"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.instructure.canvas.model.CertLetterQueue"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.instructure.canvas.model.CertLetterQueue"),
			true);
	public static long COURSEID_COLUMN_BITMASK = 1L;
	public static long CREATEDBY_COLUMN_BITMASK = 2L;
	public static long ERRORCOUNT_COLUMN_BITMASK = 4L;
	public static long EXPIRYDATE_COLUMN_BITMASK = 8L;
	public static long STATUS_COLUMN_BITMASK = 16L;
	public static long TYPE_COLUMN_BITMASK = 32L;
	public static long ID_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CertLetterQueue toModel(CertLetterQueueSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CertLetterQueue model = new CertLetterQueueImpl();

		model.setId(soapModel.getId());
		model.setCourseId(soapModel.getCourseId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setStatus(soapModel.getStatus());
		model.setErrorDescription(soapModel.getErrorDescription());
		model.setErrorCount(soapModel.getErrorCount());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStartTime(soapModel.getStartTime());
		model.setEndTime(soapModel.getEndTime());
		model.setZipFileLocation(soapModel.getZipFileLocation());
		model.setExpiryDate(soapModel.getExpiryDate());
		model.setType(soapModel.getType());
		model.setDownloadDate(soapModel.getDownloadDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CertLetterQueue> toModels(
		CertLetterQueueSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CertLetterQueue> models = new ArrayList<CertLetterQueue>(soapModels.length);

		for (CertLetterQueueSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.instructure.canvas.model.CertLetterQueue"));

	public CertLetterQueueModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CertLetterQueue.class;
	}

	@Override
	public String getModelClassName() {
		return CertLetterQueue.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("courseId", getCourseId());
		attributes.put("createDate", getCreateDate());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("status", getStatus());
		attributes.put("errorDescription", getErrorDescription());
		attributes.put("errorCount", getErrorCount());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("startTime", getStartTime());
		attributes.put("endTime", getEndTime());
		attributes.put("zipFileLocation", getZipFileLocation());
		attributes.put("expiryDate", getExpiryDate());
		attributes.put("type", getType());
		attributes.put("downloadDate", getDownloadDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long courseId = (Long)attributes.get("courseId");

		if (courseId != null) {
			setCourseId(courseId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String errorDescription = (String)attributes.get("errorDescription");

		if (errorDescription != null) {
			setErrorDescription(errorDescription);
		}

		Integer errorCount = (Integer)attributes.get("errorCount");

		if (errorCount != null) {
			setErrorCount(errorCount);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date startTime = (Date)attributes.get("startTime");

		if (startTime != null) {
			setStartTime(startTime);
		}

		Date endTime = (Date)attributes.get("endTime");

		if (endTime != null) {
			setEndTime(endTime);
		}

		String zipFileLocation = (String)attributes.get("zipFileLocation");

		if (zipFileLocation != null) {
			setZipFileLocation(zipFileLocation);
		}

		Date expiryDate = (Date)attributes.get("expiryDate");

		if (expiryDate != null) {
			setExpiryDate(expiryDate);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		Date downloadDate = (Date)attributes.get("downloadDate");

		if (downloadDate != null) {
			setDownloadDate(downloadDate);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getCourseId() {
		return _courseId;
	}

	@Override
	public void setCourseId(long courseId) {
		_columnBitmask |= COURSEID_COLUMN_BITMASK;

		if (!_setOriginalCourseId) {
			_setOriginalCourseId = true;

			_originalCourseId = _courseId;
		}

		_courseId = courseId;
	}

	public long getOriginalCourseId() {
		return _originalCourseId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_columnBitmask |= CREATEDBY_COLUMN_BITMASK;

		if (!_setOriginalCreatedBy) {
			_setOriginalCreatedBy = true;

			_originalCreatedBy = _createdBy;
		}

		_createdBy = createdBy;
	}

	public long getOriginalCreatedBy() {
		return _originalCreatedBy;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	@JSON
	@Override
	public String getErrorDescription() {
		if (_errorDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _errorDescription;
		}
	}

	@Override
	public void setErrorDescription(String errorDescription) {
		_errorDescription = errorDescription;
	}

	@JSON
	@Override
	public int getErrorCount() {
		return _errorCount;
	}

	@Override
	public void setErrorCount(int errorCount) {
		_columnBitmask |= ERRORCOUNT_COLUMN_BITMASK;

		if (!_setOriginalErrorCount) {
			_setOriginalErrorCount = true;

			_originalErrorCount = _errorCount;
		}

		_errorCount = errorCount;
	}

	public int getOriginalErrorCount() {
		return _originalErrorCount;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getStartTime() {
		return _startTime;
	}

	@Override
	public void setStartTime(Date startTime) {
		_startTime = startTime;
	}

	@JSON
	@Override
	public Date getEndTime() {
		return _endTime;
	}

	@Override
	public void setEndTime(Date endTime) {
		_endTime = endTime;
	}

	@JSON
	@Override
	public String getZipFileLocation() {
		if (_zipFileLocation == null) {
			return StringPool.BLANK;
		}
		else {
			return _zipFileLocation;
		}
	}

	@Override
	public void setZipFileLocation(String zipFileLocation) {
		_zipFileLocation = zipFileLocation;
	}

	@JSON
	@Override
	public Date getExpiryDate() {
		return _expiryDate;
	}

	@Override
	public void setExpiryDate(Date expiryDate) {
		_columnBitmask |= EXPIRYDATE_COLUMN_BITMASK;

		if (_originalExpiryDate == null) {
			_originalExpiryDate = _expiryDate;
		}

		_expiryDate = expiryDate;
	}

	public Date getOriginalExpiryDate() {
		return _originalExpiryDate;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	@JSON
	@Override
	public Date getDownloadDate() {
		return _downloadDate;
	}

	@Override
	public void setDownloadDate(Date downloadDate) {
		_downloadDate = downloadDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CertLetterQueue.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CertLetterQueue toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CertLetterQueue)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CertLetterQueueImpl certLetterQueueImpl = new CertLetterQueueImpl();

		certLetterQueueImpl.setId(getId());
		certLetterQueueImpl.setCourseId(getCourseId());
		certLetterQueueImpl.setCreateDate(getCreateDate());
		certLetterQueueImpl.setCreatedBy(getCreatedBy());
		certLetterQueueImpl.setStatus(getStatus());
		certLetterQueueImpl.setErrorDescription(getErrorDescription());
		certLetterQueueImpl.setErrorCount(getErrorCount());
		certLetterQueueImpl.setModifiedDate(getModifiedDate());
		certLetterQueueImpl.setStartTime(getStartTime());
		certLetterQueueImpl.setEndTime(getEndTime());
		certLetterQueueImpl.setZipFileLocation(getZipFileLocation());
		certLetterQueueImpl.setExpiryDate(getExpiryDate());
		certLetterQueueImpl.setType(getType());
		certLetterQueueImpl.setDownloadDate(getDownloadDate());

		certLetterQueueImpl.resetOriginalValues();

		return certLetterQueueImpl;
	}

	@Override
	public int compareTo(CertLetterQueue certLetterQueue) {
		long primaryKey = certLetterQueue.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CertLetterQueue)) {
			return false;
		}

		CertLetterQueue certLetterQueue = (CertLetterQueue)obj;

		long primaryKey = certLetterQueue.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CertLetterQueueModelImpl certLetterQueueModelImpl = this;

		certLetterQueueModelImpl._originalCourseId = certLetterQueueModelImpl._courseId;

		certLetterQueueModelImpl._setOriginalCourseId = false;

		certLetterQueueModelImpl._originalCreatedBy = certLetterQueueModelImpl._createdBy;

		certLetterQueueModelImpl._setOriginalCreatedBy = false;

		certLetterQueueModelImpl._originalStatus = certLetterQueueModelImpl._status;

		certLetterQueueModelImpl._originalErrorCount = certLetterQueueModelImpl._errorCount;

		certLetterQueueModelImpl._setOriginalErrorCount = false;

		certLetterQueueModelImpl._originalExpiryDate = certLetterQueueModelImpl._expiryDate;

		certLetterQueueModelImpl._originalType = certLetterQueueModelImpl._type;

		certLetterQueueModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CertLetterQueue> toCacheModel() {
		CertLetterQueueCacheModel certLetterQueueCacheModel = new CertLetterQueueCacheModel();

		certLetterQueueCacheModel.id = getId();

		certLetterQueueCacheModel.courseId = getCourseId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			certLetterQueueCacheModel.createDate = createDate.getTime();
		}
		else {
			certLetterQueueCacheModel.createDate = Long.MIN_VALUE;
		}

		certLetterQueueCacheModel.createdBy = getCreatedBy();

		certLetterQueueCacheModel.status = getStatus();

		String status = certLetterQueueCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			certLetterQueueCacheModel.status = null;
		}

		certLetterQueueCacheModel.errorDescription = getErrorDescription();

		String errorDescription = certLetterQueueCacheModel.errorDescription;

		if ((errorDescription != null) && (errorDescription.length() == 0)) {
			certLetterQueueCacheModel.errorDescription = null;
		}

		certLetterQueueCacheModel.errorCount = getErrorCount();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			certLetterQueueCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			certLetterQueueCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date startTime = getStartTime();

		if (startTime != null) {
			certLetterQueueCacheModel.startTime = startTime.getTime();
		}
		else {
			certLetterQueueCacheModel.startTime = Long.MIN_VALUE;
		}

		Date endTime = getEndTime();

		if (endTime != null) {
			certLetterQueueCacheModel.endTime = endTime.getTime();
		}
		else {
			certLetterQueueCacheModel.endTime = Long.MIN_VALUE;
		}

		certLetterQueueCacheModel.zipFileLocation = getZipFileLocation();

		String zipFileLocation = certLetterQueueCacheModel.zipFileLocation;

		if ((zipFileLocation != null) && (zipFileLocation.length() == 0)) {
			certLetterQueueCacheModel.zipFileLocation = null;
		}

		Date expiryDate = getExpiryDate();

		if (expiryDate != null) {
			certLetterQueueCacheModel.expiryDate = expiryDate.getTime();
		}
		else {
			certLetterQueueCacheModel.expiryDate = Long.MIN_VALUE;
		}

		certLetterQueueCacheModel.type = getType();

		String type = certLetterQueueCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			certLetterQueueCacheModel.type = null;
		}

		Date downloadDate = getDownloadDate();

		if (downloadDate != null) {
			certLetterQueueCacheModel.downloadDate = downloadDate.getTime();
		}
		else {
			certLetterQueueCacheModel.downloadDate = Long.MIN_VALUE;
		}

		return certLetterQueueCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", courseId=");
		sb.append(getCourseId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", errorDescription=");
		sb.append(getErrorDescription());
		sb.append(", errorCount=");
		sb.append(getErrorCount());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", startTime=");
		sb.append(getStartTime());
		sb.append(", endTime=");
		sb.append(getEndTime());
		sb.append(", zipFileLocation=");
		sb.append(getZipFileLocation());
		sb.append(", expiryDate=");
		sb.append(getExpiryDate());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", downloadDate=");
		sb.append(getDownloadDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.instructure.canvas.model.CertLetterQueue");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseId</column-name><column-value><![CDATA[");
		sb.append(getCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorDescription</column-name><column-value><![CDATA[");
		sb.append(getErrorDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorCount</column-name><column-value><![CDATA[");
		sb.append(getErrorCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startTime</column-name><column-value><![CDATA[");
		sb.append(getStartTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endTime</column-name><column-value><![CDATA[");
		sb.append(getEndTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zipFileLocation</column-name><column-value><![CDATA[");
		sb.append(getZipFileLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiryDate</column-name><column-value><![CDATA[");
		sb.append(getExpiryDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>downloadDate</column-name><column-value><![CDATA[");
		sb.append(getDownloadDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CertLetterQueue.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			CertLetterQueue.class
		};
	private long _id;
	private long _courseId;
	private long _originalCourseId;
	private boolean _setOriginalCourseId;
	private Date _createDate;
	private long _createdBy;
	private long _originalCreatedBy;
	private boolean _setOriginalCreatedBy;
	private String _status;
	private String _originalStatus;
	private String _errorDescription;
	private int _errorCount;
	private int _originalErrorCount;
	private boolean _setOriginalErrorCount;
	private Date _modifiedDate;
	private Date _startTime;
	private Date _endTime;
	private String _zipFileLocation;
	private Date _expiryDate;
	private Date _originalExpiryDate;
	private String _type;
	private String _originalType;
	private Date _downloadDate;
	private long _columnBitmask;
	private CertLetterQueue _escapedModel;
}